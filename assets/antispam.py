from aiogram import types
from functools import wraps
import time

from aiogram.types import ChatMemberOwner, ChatMemberAdministrator

import config as cfg
import commands.db as db
from bot import bot

from user import BFGuser
from assets.classes import FunEvent


earning_msg = {}


def admin_only(private=False):
    def decorator(func):
        @wraps(func)
        async def wrapper(message: types.Message, *args, **kwargs):
            if message.from_user.id not in cfg.admin:
                return
            
            if private and message.chat.type != "private":
                return
            
            return await func(message, *args, **kwargs)
        return wrapper
    return decorator


def antispam(func):
    async def wrapper(message: types.Message):
        if message.forward_from:
            return

        if message.chat.type == "supergroup":
            await db.upd_chat_db(message.chat.id)

        uid = message.from_user.id

        ban = await check_ban(uid)  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–Ω–∞
        if ban:
            return

        user = BFGuser(message=message)
        await user.update()

        await FunEvent.emit(func.__name__, message, user, "message")
        await func(message, user)

    return wrapper


def antispam_earning(func):
    async def wrapper(call: types.CallbackQuery):
        uid = int(call.from_user.id)
        mid = call.data.split("|")
        mid = mid[1] if len(mid) > 1 else None

        if mid and uid != int(mid):
            await bot.answer_callback_query(call.id, text="‚ùå –≠—Ç–æ –Ω–µ –í–∞—à–∞ –∫–Ω–æ–ø–∫–∞!")
            return

        ban = await check_ban(uid)  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–Ω–∞
        if ban:
            return

        chat = call.message.chat.id
        msg = call.message.message_id

        data = earning_msg.get((chat, msg))
        if data:
            if data[0] < 50:  # –º–∞–∫—Å –∫–æ–ª-–≤–æ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫—É

                if int(time.time() - 750) < int(data[1]):

                    if (time.time() - data[1]) < 1:  # –∞–Ω—Ç–∏—Å–ø–∞–º (1—Å–µ–∫)
                        await bot.answer_callback_query(call.id, text="‚è≥ –ù–µ —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ! (1 —Å–µ–∫)")
                        return

                    earning_msg[chat, msg] = (data[0] + 1, int(time.time()))

                    user = BFGuser(call=call)
                    await user.update()
                    
                    await func(call, user)
                    return

        try:
            await bot.delete_message(chat_id=chat, message_id=msg)
        except:
            pass
        earning_msg.pop((chat, msg), None)

    return wrapper


def moderation(func):
    async def wrapper(message: types.Message, user: BFGuser):
        if message.forward_from:
            return

        if message.chat.type != "supergroup":
            await message.answer("üëá <b>–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–∞—Ö.</b>")
            return

        member = await message.bot.get_chat_member(message.chat.id, message.from_user.id)

        if member.status not in ["creator", "administrator"]:
            await message.reply(f"üò® <b>–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —á–∞—Ç–∞.</b>")
            return

        bot_info = await message.chat.get_member(user_id=message.bot.id)
        text = ""

        if not isinstance(bot_info, (ChatMemberOwner, ChatMemberAdministrator)):
            await message.reply("‚ö†Ô∏è <b>–ë–æ—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —á–∞—Ç–µ.</b>")
            return

        if not bot_info.can_delete_messages:
            text += "- üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        if not bot_info.can_restrict_members:
            text += "- üìõ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            
        if text:
            await message.reply(f"‚ö†Ô∏è <b>–ë–æ—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —á–∞—Ç–µ:</b>\n\n{text}")
            return

        await func(message, user)

    return wrapper


async def check_ban(user_id: int) -> bool:
    await db.reg_user(user_id=user_id)
    ban_time = await db.getban(user_id=user_id)

    if ban_time and time.time() < ban_time[1]:
        return True
    return False


async def new_earning_msg(chat_id: int, message_id: int) -> None:
    earning_msg[chat_id, message_id] = (0, time.time()-2)
    
    
async def new_earning(msg: types.Message) -> None:
    earning_msg[msg.chat.id, msg.message_id] = (0, time.time()-2)
