import asyncio
from datetime import datetime
from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup

from assets.antispam import admin_only
from commands.admin import keyboards as kb
from commands.admin.db import *
from bot import bot


class new_ads_state(StatesGroup):
    txt = State()


class Mailing(StatesGroup):
    mailing_text = State()
    mailing_conf = State()


async def new_ads(message: types.Message, state: FSMContext, action=0):
    if action == 0:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(types.KeyboardButton("–û—Ç–º–µ–Ω–∞"))
        await message.answer("‚öôÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º—ã ('-' —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å)\n\n"
                             "<i>–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML-—Ç–µ–≥–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞.</i>", reply_markup=keyboard)
        await new_ads_state.txt.set()
        return

    if message.text == '–û—Ç–º–µ–Ω–∞':
        await state.finish()
        await admin_menu(message)
        return

    message.text = '' if message.text == '-' else message.text
    try:
        ads = message.text.replace(r'\n', '\n')
        msg = '‚öôÔ∏è –†–µ–∫–ª–∞–º–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —É–¥–∞–ª–µ–Ω–∞' if message.text == '' else '‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º—ã:\n\n' + ads
        await message.answer(msg, disable_web_page_preview=True)
        await upd_ads(message.text)
    except:
        await message.answer('‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞–∑–º–µ—Ç–∫–µ HTML')

    await state.finish()
    await admin_menu(message)
    

@admin_only(private=True)
async def unloading(message: types.Message):
    await message.answer('<b>‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏:</b>', reply_markup=kb.unloading_menu())


@admin_only(private=True)
async def unloading_db(message: types.Message):
    time = datetime.now().strftime("%Y-%m-%d –≤ %H:%M:%S")
    with open('users.db', 'rb') as file:
        await bot.send_document(message.chat.id, file, caption=f'üõ° –ö–æ–ø–∏—è –±–¥ —Å–æ–∑–¥–∞–Ω–∞ <blockquote>{time}</blockquote>')
        

@admin_only(private=True)
async def unloading_errors(message: types.Message):
    time = datetime.now().strftime("%Y-%m-%d –≤ %H:%M:%S")
    with open('commands/admin/bot_errors.txt', 'rb') as file:
        await bot.send_document(message.chat.id, file, caption=f'‚ÄºÔ∏è –û—à–∏–±–∫–∏ –±–æ—Ç–∞ –Ω–∞ –º–æ–º–µ–Ω—Ç <blockquote>{time}</blockquote>')


@admin_only(private=True)
async def unloading_logs(message: types.Message):
    time = datetime.now().strftime("%Y-%m-%d –≤ %H:%M:%S")
    with open('commands/admin/logs.txt', 'rb') as file:
        await bot.send_document(message.chat.id, file, caption=f'üìã –õ–æ–≥–∏ –±–æ—Ç–∞ –Ω–∞ –º–æ–º–µ–Ω—Ç <blockquote>{time}</blockquote>')


@admin_only(private=True)
async def admin_menu(message: types.Message):
    await message.answer('<b>üëÆ‚Äç‚ôÇÔ∏è –ê–¥–º–∏–Ω –º–µ–Ω—é:</b>', reply_markup=kb.admin_menu())
    

@admin_only(private=True)
async def ads_menu(message: types.Message):
    await message.answer('<b>üòá –ú–µ–Ω—é —Ä–µ–∫–ª–∞–º—ã:</b>', reply_markup=kb.ads_menu())


@admin_only(private=True)
async def rassilka(message: types.Message):
    await Mailing.mailing_text.set()
    await message.answer('üìÇ –ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –≥–æ—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:', reply_markup=kb.cancel())


async def process_rassilka(message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        await state.finish()
        await message.answer('–û—Ç–º–µ–Ω–µ–Ω–æ.')
        await admin_menu(message)
        return

    inline_keyboard = None
    if message.reply_markup and message.reply_markup.inline_keyboard:
        inline_keyboard = message.reply_markup.inline_keyboard
        inline_keyboard = InlineKeyboardMarkup(inline_keyboard=inline_keyboard)

    await state.update_data(text=message.text, inline_keyboard=inline_keyboard)
    await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.\n–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É? (–¥–∞/–Ω–µ—Ç)")
    await Mailing.mailing_conf.set()


async def process_rassilka2(message: types.Message, state: FSMContext):
    data = await state.get_data()
    await state.finish()

    if message.text.lower() != '–¥–∞':
        await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return

    users, chats = await get_users_chats()

    ucount, uerror = 0, 0,
    ucount2, uerror2 = 0, 0

    await message.answer("‚ú® –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!")
    await admin_menu(message)

    for user_id in users:
        try:
            await bot.send_message(user_id[0], data['text'], reply_markup=data['inline_keyboard'])
            await asyncio.sleep(0.05)
            ucount += 1
        except:
            uerror += 1

    for chat_id in chats:
        try:
            await bot.send_message(chat_id[0], data['text'], reply_markup=data['inline_keyboard'])
            await asyncio.sleep(0.05)
            ucount2 += 1
        except:
            uerror2 += 1

    await message.answer(f'''üì° <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.</b>
    
<i>–õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:</i>
  –ü–æ–ª—É—á–µ–Ω–æ: {ucount:,}
  –ù–µ –ø–æ–ª—É—á–µ–Ω–æ: {uerror:,}

<i>–ß–∞—Ç—ã:</i>
  –ü–æ–ª—É—á–µ–Ω–æ: {ucount2:,}
  –ù–µ –ø–æ–ª—É—á–µ–Ω–æ: {uerror2:,}''')


def reg(dp: Dispatcher):
    dp.register_message_handler(admin_menu, commands='adm')
    dp.register_message_handler(admin_menu, lambda message: message.text == 'üîô –ù–∞–∑–∞–¥')
    
    dp.register_message_handler(unloading, lambda message: message.text == 'üì• –í—ã–≥—Ä—É–∑–∫–∞')
    dp.register_message_handler(unloading_logs, lambda message: message.text == 'üìã –õ–æ–≥–∏')
    dp.register_message_handler(unloading_errors, lambda message: message.text == '‚ùóÔ∏è –û—à–∏–±–∫–∏')
    dp.register_message_handler(unloading_db, lambda message: message.text == 'üíæ –ë–¥')
    
    dp.register_message_handler(ads_menu, lambda message: message.text == 'üì£ –†–µ–∫–ª–∞–º–∞')
    dp.register_message_handler(new_ads, lambda message: message.text == 'ü™™ –¢–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º—ã')
    dp.register_message_handler(lambda message, state: new_ads(message, state, action=1), state=new_ads_state.txt)
    dp.register_message_handler(rassilka, lambda message: message.text == 'üìç –†–∞—Å—Å—ã–ª–∫–∞')
    dp.register_message_handler(process_rassilka, state=Mailing.mailing_text)
    dp.register_message_handler(process_rassilka2, state=Mailing.mailing_conf)