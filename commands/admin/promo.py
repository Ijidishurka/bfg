from aiogram import types, Dispatcher
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext

from assets.transform import transform_int as tr
from assets.antispam import antispam, admin_only
from commands.admin.admin import admin_menu_cmd
from commands.admin.db import *
from commands.admin.game_log import new_log
from assets import keyboards as kb
import config as cfg
from bot import bot
from filters.custom import TextIn, StartsWith
from user import BFGuser, BFGconst
from states.admin import NewPromoState, DellPromoState, PromoInfoState


@admin_only(private=True)
async def promo_menu(message: types.Message):
    await message.answer("üëæ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb.promo_menu())


@admin_only(private=True)
async def new_promo(message, state: FSMContext):
    current = await state.get_state()

    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        await promo_menu(message)
        return

    if not current:
        await message.answer("üòÑ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ", reply_markup=kb.cancel())
        await state.set_state(NewPromoState.txt)
        return

    if current == NewPromoState.txt:
        await state.update_data(name=message.text.split()[0])
        await message.answer("üìü –í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç—É –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ (—Ç–∞–±–ª–∏—Ü–∞/—Å—Ç–æ–ª–±–∏–∫ —ç–º–æ–¥–∑–∏)\n\n"
                             "–ü—Ä–∏–º–µ—Ä –¥–ª—è –ø—Ä–æ–º–æ –Ω–∞ –π–µ–Ω—ã: <code>users/yen üí¥</code>\n\n"
                             "<i>–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–∞ –¥–µ–Ω—å–≥–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ \"-\"</i>")
        await state.set_state(NewPromoState.summ)
        return

    if current == NewPromoState.summ:
        txt = "users/balance $" if message.text == "-" else message.text
        await state.update_data(txt=txt)
        await message.answer("üòÉ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É $ –∑–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é")
        await state.set_state(NewPromoState.activ)
        return

    try:
        summ = message.text.split()[0].replace("–µ", "e")
        summ = int(float(summ))
    except:
        await message.answer("üòî –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º...")
        return

    if current == NewPromoState.activ:
        await state.update_data(summ=summ)
        await message.answer("üòä –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π")
        await state.set_state(NewPromoState.name)
        return

    await state.update_data(activ=summ)
    data = await state.get_data()
    await state.clear()

    data2 = (data["name"], data["summ"], data["activ"], data["txt"])
    
    if (await new_promo_db(data2)):
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–º–æ–∫–æ–¥ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        await admin_menu_cmd(message)
        return

    summ = tr(data["summ"])
    summ2 = tr(int(data["summ"] * data["activ"]))
    activ = tr(data["activ"])
    emj = " ".join(data["txt"].split()[1:])

    await message.answer(f"""üé∞ –í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥:\n
–ù–∞–∑–≤–∞–Ω–∏–µ: <code>{data["name"]}</code>
–°—É–º–º–∞: {summ}{emj}
–ê–∫—Ç–∏–≤–∞—Ü–∏–π: {activ}\n
–û–±—â–∞—è —Å—É–º–º–∞: {summ2}{emj}""")
    await admin_menu_cmd(message)


@admin_only(private=True)
async def promo_info(message, state: FSMContext):
    current = await state.get_state()

    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        await promo_menu(message)
        return

    if not current:
        await message.answer("üíª –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ", reply_markup=kb.cancel())
        await state.set_state(PromoInfoState.name)
        return

    name = message.text.split()[0]
    res = await promo_info_db(name)
    
    if not res:
        await message.answer(f"‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ <b>{name}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        summ = tr(int(res[1]))
        emj = " ".join(res[3].split()[1:])
        await message.answer(f"""üé∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–º–æ–∫–æ–¥–µ:

–ù–∞–∑–≤–∞–Ω–∏–µ: <code>{res[0]}</code>
–°—É–º–º–∞: {summ}{emj}
–û—Å—Ç–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {res[2]}""")
    await state.clear()
    await promo_menu(message)


@admin_only(private=True)
async def dell_promo(message, state: FSMContext):
    current = await state.get_state()

    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        await promo_menu(message)
        return

    if not current:
        await message.answer("üóë –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å", reply_markup=kb.cancel())
        await state.set_state(DellPromoState.name)
        return

    name = message.text.split()[0]
    res = await dell_promo_db(name)

    if res:
        await message.answer(f"‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ <b>{name}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        await message.answer(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ <b>{name}</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!")

    await state.clear()
    await promo_menu(message)


@antispam
async def activ_promo(message: types.Message, user: BFGuser):
    win, lose = BFGconst.emj()
    
    if len(message.text.split()) < 2:
        await message.answer(f"–í—ã –Ω–µ –≤–≤–µ–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ {lose}")
        return
    
    try:
        chanell = await bot.get_chat_member(chat_id="@"+cfg.channel.replace("t.me/", ""), user_id=message.from_user.id)
    
        if chanell["status"] in ["left", "kicked"]:
            await message.answer(f"–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –≤–∞–º –Ω–∞–¥–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ <a href='{cfg.channel}'>–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª –±–æ—Ç–∞</a> {lose}\n\n{BFGconst.ads}")
            return
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª {e}")

    name = message.text.split()[1]
    res = await activ_promo_db(name, user.id)

    if res == "no promo":
        await message.answer(f"–î–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç {lose}\n\n{BFGconst.ads}")
        return

    if res == "activated":
        await message.answer(f"–î–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω {lose}\n\n{BFGconst.ads}")
        return

    if res == "used":
        await message.answer(f"–í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ {lose}\n\n{BFGconst.ads}")
        return

    summ = tr(int(res[1]))
    emj = " ".join(res[3].split()[1:])

    await new_log(f"#–ø—Ä–æ–º–æ–∞–∫—Ç–∏–≤\n–ò–≥—Ä–æ–∫: {message.from_user.id}\n–ü—Ä–æ–º–æ: {name}\n–°—É–º–º–∞: {summ}{emj}", "promo")
    await message.answer(f"{user.url}, –≤—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ <b>{res[0]}</b>!\n–ü–æ–ª—É—á–µ–Ω–æ: <b>{summ}</b>{emj} {win}")


def reg(dp: Dispatcher):
    dp.message.register(promo_menu, TextIn("‚ú® –ü—Ä–æ–º–æ–∫–æ–¥—ã"))

    dp.message.register(promo_info, TextIn("‚ÑπÔ∏è –ü—Ä–æ–º–æ –∏–Ω—Ñ–æ"))
    dp.message.register(promo_info, PromoInfoState.name)

    dp.message.register(new_promo, TextIn("üìñ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ"))
    dp.message.register(new_promo, StateFilter(NewPromoState.txt, NewPromoState.name, NewPromoState.summ, NewPromoState.activ))

    dp.message.register(dell_promo, TextIn("üóë –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ"))
    dp.message.register(dell_promo, DellPromoState.name)

    dp.message.register(activ_promo, StartsWith("–ø—Ä–æ–º–æ"))
