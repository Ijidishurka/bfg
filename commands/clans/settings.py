from aiogram import Dispatcher, types
from assets.antispam import antispam
from commands.clans.db import *
from commands.db import url_name
from assets import kb
import re

from user import BFGuser, BFGconst


@antispam
async def clan_dell(message: types.message, user: BFGuser):
	win, lose = BFGconst.emj()
	data = await clan_info(user.user_id)

	if not data:
		await message.answer(f'{user.url}, –≤—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ {lose}')
		return

	if data[2] != 4:
		await message.answer(f'{user.url}, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–π –∫–ª–∞–Ω —Ç–∞–∫ –∫–∞–∫ –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –∫–ª–∞–Ω–∞ {lose}')
		return

	d, _, _ = await clan_full_info(data[1])

	await message.answer(f'''<b>[–í–Ω–∏–º–∞–Ω–∏–µ]</b>
üòî –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–ª–∞–Ω <b>[{d[2]}]</b>
‚úÖ –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ''', reply_markup=kb.dell_clan(user.user_id, data[1]))


async def clan_dell_call(call: types.CallbackQuery):
	user_id = call.from_user.id
	cdata = call.data.split('|')
	zap = cdata[0].split('_')[1]
	uid, cid = int(cdata[1]), int(cdata[2])
	win, lose = BFGconst.emj()
	data = await clan_info(user_id)
	name = await url_name(user_id)

	if uid != user_id:
		return

	if not data or data[2] != 4 or data[1] != cid:
		zap = 'false'

	try:
		await call.message.delete()
	except:
		return

	if zap == 'false':
		return

	res = await clan_dell_db(data[1])
	await call.message.answer(f'{name}, –≤—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –∫–ª–∞–Ω <b>[{res}]</b> {win}')


@antispam
async def clan_name(message: types.message, user: BFGuser):
	win, lose = BFGconst.emj()
	data = await clan_info(user.user_id)

	if not data:
		await message.answer(f'{user.url}, –≤—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ {lose}')
		return

	try:
		name = " ".join(message.text.split()[2:])
	except:
		await message.answer(f'{user.url}, –≤—ã –Ω–µ –≤–≤–µ–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å {lose}')
		return

	if len(name) < 5:
		await message.answer(f'{user.url}, –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ —á–µ–º 5 —Å–∏–º–≤–æ–ª–æ–≤ {lose}')
		return

	if len(name) > 25:
		await message.answer(f'{user.url}, –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–µ–µ —á–µ–º 25 —Å–∏–º–≤–æ–ª–æ–≤ {lose}')
		return

	if re.search(r'<|>|@|t\.me|http', name):
		await message.answer(f'{user.url}, –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –∫–ª–∞–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã {lose}')
		return

	res = await new_name_clan_db(name, data[1], data[2])

	if res == '<small rank':
		await message.answer(f'{user.url}, –≤–∞—à —Ä–∞–Ω–≥ —Å–ª–∏—à–∫–æ–º –º–∞–ª, –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞ {lose}')
	else:
		await message.answer(f'<b>[–í–Ω–∏–º–∞–Ω–∏–µ]</b>\n‚úèÔ∏è –í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞ –Ω–∞ <b>[{name}]</b>')


@antispam
async def clan_new_owner(message: types.message, user: BFGuser):
	win, lose = BFGconst.emj()
	data = await clan_info(user.user_id)

	if not data:
		await message.answer(f'{user.url}, –≤—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ {lose}')
		return

	try:
		uid = int(message.text.split()[2])
	except:
		await message.answer(f'{user.url}, –≤—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ ID –∏–≥—Ä–æ–∫–∞ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –∫–ª–∞–Ω {lose}')
		return

	if data[2] != 4:
		await message.answer(f'{user.url}, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –∫–ª–∞–Ω —Ç–∞–∫ –∫–∞–∫ –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –µ–≥–æ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–º {lose}')
		return

	if user.user_id == uid:
		await message.answer(f'{user.url}, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –∫–ª–∞–Ω —Å–∞–º–æ–º—É —Å–µ–±–µ {lose}')
		return

	r_data = await clan_info(user.user_id)
	d, _, _ = await clan_full_info(data[1])

	if r_data and r_data[1] == data[1]:
		await message.answer(f'''<b>‚ö†Ô∏è –í–ê–ñ–ù–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï ‚ö†Ô∏è</b>
<b>–ü–µ—Ä–µ–¥–∞—á–∞ –∫–ª–∞–Ω–∞ "{d[2]}"</b>
üî¥ <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —è–≤–ª—è–µ—Ç—Å—è –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–º –∏ <u>–Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–º–µ–Ω–µ–Ω–æ</u> –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å –≤ —Å–≤–æ–µ–º —Ä–µ—à–µ–Ω–∏–∏ –ø–µ—Ä–µ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º.
‚úÖ –ï—Å–ª–∏ –≤—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–≤–µ—Ä–µ–Ω—ã –≤ —Å–≤–æ–µ–º —Ä–µ—à–µ–Ω–∏–∏ –∏ –≥–æ—Ç–æ–≤—ã –ø–µ—Ä–µ–¥–∞—Ç—å –∫–ª–∞–Ω, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.''', reply_markup=kb.new_own_clan(uid, data[1], user.user_id))
	else:
		await message.answer(f'{user.url}, –¥–∞–Ω–Ω—ã–π –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –≤–∞—à–µ–º –∫–ª–∞–Ω–µ, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –µ–º—É –∫–ª–∞–Ω {lose}')


async def clan_new_owner_call(call: types.CallbackQuery):
	user_id = call.from_user.id
	cdata = call.data.split('|')
	zap = cdata[0].split('_')[1]
	uid, cid, uid2 = int(cdata[1]), int(cdata[2]), int(cdata[3])
	data = await clan_info(user_id)
	data2 = await clan_info(uid)
	user_name = await url_name(user_id)

	if uid2 != user_id:
		return

	if not data or not data2 or data[2] != 4 or data[1] != cid or data2[1] != data[1]:
		zap = 'false'

	try:
		await call.message.delete()
	except:
		return

	if zap == 'false':
		return

	name = await new_owner_db(uid, cid, user_id)
	await call.message.answer(f'{user_name}, –≤—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–ª–∏ –∫–ª–∞–Ω <b>[{name}]</b> –∏–≥—Ä–æ–∫—É —Å ID: {uid}')


@antispam
async def clan_setting_type(message: types.message, user: BFGuser):
	win, lose = BFGconst.emj()
	data = await clan_info(user.user_id)

	if not data:
		await message.answer(f'{user.url}, –≤—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ {lose}')
		return

	d, _, _ = await clan_full_info(data[1])

	try:
		type = message.text.lower().split()[3]
	except:
		await message.answer(f'{user.url}, –≤—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Ç–∏–ø –∫–ª–∞–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å.\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: [–∑–∞–∫—Ä—ã—Ç—ã–π, –æ—Ç–∫—Ä—ã—Ç—ã–π] {lose}')
		return

	if data[2] != 4:
		await message.answer(f'{user.url}, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∞–Ω–∞ —Ç–∞–∫ –∫–∞–∫ –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –∫–ª–∞–Ω–∞ {lose}')
		return

	if type == '–∑–∞–∫—Ä—ã—Ç—ã–π':
		u = 0
	elif type == '–æ—Ç–∫—Ä—ã—Ç—ã–π':
		u = 1
	else:
		await message.answer(f'{user.url}, –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–ª–∞–Ω–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: [–∑–∞–∫—Ä—ã—Ç—ã–π, –æ—Ç–∫—Ä—ã—Ç—ã–π] {lose}')
		return

	await upd_settings_type_db(u, data[1])
	await message.answer(f'<b>[–í–Ω–∏–º–∞–Ω–∏–µ]</b>\nüì• –í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ —Ç–∏–ø –∫–ª–∞–Ω–∞ <b>[{d[2]}]</b> –Ω–∞ {type}')


@antispam
async def clan_settings(message: types.message, user: BFGuser):
	win, lose = BFGconst.emj()
	data = await clan_info(user.user_id)

	if not data:
		await message.answer(f'{user.url}, –≤—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ {lose}')
		return

	d, _, _ = await clan_full_info(data[1])

	try:
		msg = message.text.lower().split()[2]
		u = int(message.text.split()[3])
	except:
		if 'msg' not in locals():
			await message.answer('<b>[–í–Ω–∏–º–∞–Ω–∏–µ]</b>\n‚ùå –î–∞–Ω–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –≤–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑')
		else:
			await message.answer(f'{user.url}, –≤—ã –Ω–µ –≤–≤–µ–ª–∏ —Ä–∞–Ω–≥ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É [1-4] {lose}')
		return

	if u not in range(1, 5):
		await message.answer(f'{user.url}, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–∞–Ω–≥ –≤—ã—à–µ 4 {lose}')
		return

	if data[2] != 4:
		await message.answer(f'{user.url}, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∞–Ω–∞ —Ç–∞–∫ –∫–∞–∫ –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –∫–ª–∞–Ω–∞ {lose}')
		return

	mlist = {
		'–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ': ('–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–∞ –≤—Ö–æ–¥ –≤ –∫–ª–∞–Ω', 'inv'),
		'–∫–∏–∫': ('–Ω–∞ –∫–∏–∫ —Å –∫–ª–∞–Ω–∞', 'kick'),
		'—Ä–∞–Ω–≥–∏': ('–∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–Ω–≥–æ–≤ –≤ –∫–ª–∞–Ω–µ', 'ranks'),
		'–∫–∞–∑–Ω–∞': ('—Å–Ω—è—Ç–∏—è –¥–µ–Ω–µ–≥ —Å –∫–∞–∑–Ω—ã –∫–ª–∞–Ω–∞', 'kazna'),
		'–æ–≥—Ä–∞–±–ª–µ–Ω–∏–µ': ('–Ω–∞—á–∞–ª–∞ –æ–≥—Ä–∞–±–ª–µ–Ω–∏–µ –≤ –∫–ª–∞–Ω–µ', 'robbery'),
		'–≤–æ–π–Ω–∞': ('–Ω–∞—á–∞–ª–∞ –≤–æ–π–Ω—ã –≤ –∫–ª–∞–Ω–µ', 'war'),
		'–Ω–∞–∑–≤–∞–Ω–∏–µ': ('–∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–ª–∞–Ω–∞', 'upd_name')
	}

	if msg in mlist:
		txt, st = mlist[msg]
	else:
		await message.answer(f'<b>[–í–Ω–∏–º–∞–Ω–∏–µ]</b>\n‚ùå –î–∞–Ω–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –≤–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑')
		return

	await upd_settings(st, data[1], u)
	await message.answer(f'<b>[–í–Ω–∏–º–∞–Ω–∏–µ]</b>\nüì• –í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ {txt} <b>[{d[2]}]</b>')


def reg(dp: Dispatcher):
	dp.register_message_handler(clan_dell, lambda message: message.text.lower().startswith('–∫–ª–∞–Ω —É–¥–∞–ª–∏—Ç—å'))
	dp.register_callback_query_handler(clan_dell_call, text_startswith='clan-dell')
	dp.register_message_handler(clan_name, lambda message: message.text.lower().startswith('–∫–ª–∞–Ω –Ω–∞–∑–≤–∞–Ω–∏–µ'))
	dp.register_message_handler(clan_new_owner, lambda message: message.text.lower().startswith('–∫–ª–∞–Ω –ø–µ—Ä–µ–¥–∞—Ç—å'))
	dp.register_callback_query_handler(clan_new_owner_call, text_startswith='clan-new-owner')
	dp.register_message_handler(clan_setting_type, lambda message: message.text.lower().startswith('–∫–ª–∞–Ω –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∏–ø'))
	dp.register_message_handler(clan_settings, lambda message: message.text.lower().startswith('–∫–ª–∞–Ω –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ '))