from aiogram import Dispatcher, types
from assets.antispam import antispam
from commands.db import url_name
from assets.transform import transform_int as tr
from commands.clans.db import *
import commands.clans.clan
import commands.clans.settings
import re

from user import BFGuser, BFGconst


@antispam
async def new_clan(message: types.message, user: BFGuser):
	win, lose = BFGconst.emj()
	data = await clan_info(user.user_id)

	if data:
		await message.answer(f'{user.url}, –≤—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π {lose}')
		return

	try:
		name = " ".join(message.text.split()[2:])
	except:
		await message.answer(f'{user.url}, –≤—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∏–º—è –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∫–ª–∞–Ω–∞ {lose}')
		return

	if len(name) < 5:
		await message.answer(f'{user.url}, –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ —á–µ–º 5 —Å–∏–º–≤–æ–ª–æ–≤ {lose}')
		return

	if len(name) > 25:
		await message.answer(f'{user.url}, –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–µ–µ —á–µ–º 25 —Å–∏–º–≤–æ–ª–æ–≤ {lose}')
		return

	if re.search(r'<|>|@|t\.me|http', name):
		await message.answer(f'{user.url}, –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –∫–ª–∞–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã {lose}')
		return

	if int(user.balance) < 250_000_000_000:
		await message.answer(f'{user.url}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–Ω–∞ {lose}')
		return

	await new_clan_db(user.user_id, name)
	await message.answer(f'{user.url}, –≤—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ –∫–ª–∞–Ω –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º "{name}".\n\n'
						 f'‚öôÔ∏è –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∞–Ω–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã —Å –ø—É–Ω–∫—Ç–∞ "–ö–ª–∞–Ω—ã"')


@antispam
async def clan_join(message: types.message, user: BFGuser):
	win, lose = BFGconst.emj()
	data = await clan_info(user.user_id)

	if data:
		await message.answer(f'{user.url}, –≤—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ. –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–æ–≤–æ–º—É {lose}')
		return

	try:
		cid = int(message.text.split()[2])
	except:
		await message.answer(f'{user.url}, –≤—ã –Ω–µ –≤–≤–µ–ª–∏ ID –∫–ª–∞–Ω–∞ –≤ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –≤—Å—Ç—É–ø–∏—Ç—å {lose}')
		return

	res = await join_clan_db(user.user_id, cid)

	if res == '<no_clan>':
		await message.answer(f'{user.url}, –∫–ª–∞–Ω–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
		return

	if res == '<private>':
		await message.answer(f'‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—Å—Ç—É–ø–∏—Ç—å –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª–∞–Ω')
		return

	await message.answer(f'''<b>[–£—Å–ø–µ—Ö]</b>
ü§© –í—ã —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –∫–ª–∞–Ω <b>[{res}]</b>

‚úÖ –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∞–Ω–µ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É [–ú–æ–π –∫–ª–∞–Ω]''')


@antispam
async def clan_leave(message: types.message, user: BFGuser):
	win, lose = BFGconst.emj()
	data = await clan_info(user.user_id)

	if not data:
		await message.answer(f'{user.url}, –≤—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ {lose}')
		return

	if data[2] == 4:
		await message.answer(f'{user.url}, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å –∫–ª–∞–Ω, —Ç–∞–∫ –∫–∞–∫ —è–≤–ª—è–µ—Ç–µ—Å—å –µ–≥–æ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–º {lose}')
		return

	res = await leave_clan_db(user.user_id, data[1])
	await message.answer(f'{user.url}, –≤—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É–ª–∏ –∫–ª–∞–Ω <b>[{res}]</b> {win}')


@antispam
async def clan_kick(message: types.message, user: BFGuser):
	win, lose = BFGconst.emj()
	data = await clan_info(user.user_id)

	if not data:
		await message.answer(f'{user.url}, –≤—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ {lose}')
		return

	try:
		uid = int(message.text.split()[2])
	except:
		await message.answer(f'{user.url}, –¥–∞–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç {lose}')
		return

	if user.user_id == uid:
		await message.answer(f'{user.url}, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–∫–ª—é—á–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è {lose}')
		return

	res = await clan_kick_db(uid, data[1], data[2])

	if res == '<small rank>':
		await message.answer(f'{user.url}, –≤–∞—à —Ä–∞–Ω–≥ —Å–ª–∏—à–∫–æ–º –º–∞–ª, –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å –¥–∞–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ {lose}')
	elif res == '<no user>':
		await message.answer(f'{user.url}, –¥–∞–Ω–Ω—ã–π –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –≤–∞—à–µ–º –∫–ª–∞–Ω–µ, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –µ–≥–æ –∏—Å–∫–ª—é—á–∏—Ç—å {lose}')
	else:
		uname = await url_name(uid)
		await message.answer(f'{user.url}, –≤—ã —É—Å–ø–µ—à–Ω–æ –∏—Å–∫–ª—é—á–∏–ª–∏ –∏–≥—Ä–æ–∫–∞ <b>[{uname}]</b> –∏–∑ –∫–ª–∞–Ω–∞ <b>[{res}]</b> {win}')


@antispam
async def clan_kazna(message: types.message, user: BFGuser):
	win, lose = BFGconst.emj()
	data = await clan_info(user.user_id)

	if not data:
		await message.answer(f'{user.url}, –≤—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ {lose}')
		return

	clan, _, _ = await clan_full_info(data[1])

	await message.answer(f'ü§ë –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∫–∞–∑–Ω–∞ –∫–ª–∞–Ω–∞ <b>[{clan[2]}]</b> —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç - {tr(int(clan[1]))}$')


@antispam
async def clan_kazna_up(message: types.message, user: BFGuser):
	win, lose = BFGconst.emj()
	data = await clan_info(user.user_id)

	if not data:
		await message.answer(f'{user.url}, –≤—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ {lose}')
		return

	try:
		if message.text.split()[2].lower() in ['–≤—Å–µ', '–≤—Å—ë']:
			summ = int(user.balance)
		else:
			summ = message.text.split()[2].replace('–µ', 'e')
			summ = int(float(summ))
	except:
		return

	if summ < 2_000_000_000_000:
		await message.answer(f'{user.url}, –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —á—Ç–æ–±—ã –ø–æ–ª–æ–∂–∏—Ç—å –≤ –∫–∞–∑–Ω—É –∫–ª–∞–Ω–∞ - 2.000.000.000.000$ {lose}')
		return

	if summ > int(user.balance):
		await message.answer(f'{user.url}, –Ω–∞ –í–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ {lose}')
		return

	await clan_kazna_up_db(user.user_id, summ, data[1])
	await message.answer(f'{user.url}, –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–∏–ª–∏ –∫–∞–∑–Ω—É –í–∞—à–µ–≥–æ –∫–ª–∞–Ω–∞ –Ω–∞ {tr(summ)}$')


@antispam
async def clan_increase_rank(message: types.message, user: BFGuser):
	win, lose = BFGconst.emj()
	data = await clan_info(user.user_id)

	if not data:
		await message.answer(f'{user.url}, –≤—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ {lose}')
		return

	try:
		uid = int(message.text.split()[2])
	except:
		await message.answer(f'{user.url}, –¥–∞–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç {lose}')
		return

	if user.user_id == uid:
		await message.answer(f'{user.url}, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–≤—ã—Å–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è {lose}')
		return

	d, _, _ = await clan_full_info(data[1])
	data2 = await clan_info(uid)

	if not data2 or data2[1] != data[1]:
		await message.answer(f'{user.url}, –¥–∞–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç {lose}')
		return

	if data[2] < d[5] or (data2[2] + 1) >= data[2]:
		await message.answer(f'{user.url}, –≤–∞—à —Ä–∞–Ω–≥ —Å–ª–∏—à–∫–æ–º –º–∞–ª, –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–≤—ã—à–∞—Ç—å —á–ª–µ–Ω–æ–≤ –∫–ª–∞–Ω–∞ {lose}')
		return

	if data2[2] >= 3:
		await message.answer(f'{user.url}, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–≤—ã—Å–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–∞ –≤—ã—à–µ 3 —Ä–∞–Ω–≥–∞ {lose}')
		return

	await clan_up_rank(uid)
	name = await url_name(uid)
	await message.answer(f'{user.url}, –≤—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–≤—ã—Å–∏–ª–∏ –∏–≥—Ä–æ–∫–∞ <b>[{name}]</b> –Ω–∞ –æ–¥–∏–Ω —Ä–∞–Ω–≥ {win}')


@antispam
async def clan_lower_rank(message: types.message, user: BFGuser):
	win, lose = BFGconst.emj()
	data = await clan_info(user.user_id)

	if not data:
		await message.answer(f'{user.url}, –≤—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ {lose}')
		return

	try:
		uid = int(message.text.split()[2])
	except:
		await message.answer(f'{user.url}, –¥–∞–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç {lose}')
		return

	if user.user_id == uid:
		await message.answer(f'{user.url}, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–Ω–∏–∑–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è {lose}')
		return

	d, _, _ = await clan_full_info(data[1])
	data2 = await clan_info(uid)

	if not data2 or data2[1] != data[1]:
		await message.answer(f'{user.url}, –¥–∞–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç {lose}')
		return

	if data[2] < d[5]:
		await message.answer(f'{user.url}, –≤–∞—à —Ä–∞–Ω–≥ —Å–ª–∏—à–∫–æ–º –º–∞–ª, –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–Ω–∏–∂–∞—Ç—å —á–ª–µ–Ω–æ–≤ –∫–ª–∞–Ω–∞ {lose}')
		return

	if data2[2] <= 1:
		await message.answer(f'{user.url}, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–Ω–∏–∑–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–∞ –Ω–∏–∂–µ 1 —Ä–∞–Ω–≥–∞ {lose}')
		return

	await clan_down_rank(uid)
	name = await url_name(uid)
	await message.answer(f'{user.url}, –≤—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–Ω–∏–∑–∏–ª–∏ –∏–≥—Ä–æ–∫–∞ <b>[{name}]</b> –Ω–∞ –æ–¥–∏–Ω —Ä–∞–Ω–≥ {win}')


def reg(dp: Dispatcher):
	dp.register_message_handler(new_clan, lambda message: message.text.lower().startswith('–∫–ª–∞–Ω —Å–æ–∑–¥–∞—Ç—å'))
	dp.register_message_handler(clan_join, lambda message: message.text.lower().startswith('–∫–ª–∞–Ω –≤—Å—Ç—É–ø–∏—Ç—å'))
	dp.register_message_handler(clan_leave, lambda message: message.text.lower().startswith('–∫–ª–∞–Ω –≤—ã–π—Ç–∏'))
	dp.register_message_handler(clan_kick, lambda message: message.text.lower().startswith('–∫–ª–∞–Ω –∏—Å–∫–ª—é—á–∏—Ç—å'))
	dp.register_message_handler(clan_kazna, lambda message: message.text.lower() == '–∫–ª–∞–Ω –∫–∞–∑–Ω–∞')
	dp.register_message_handler(clan_kazna_up, lambda message: message.text.lower().startswith('–∫–ª–∞–Ω –∫–∞–∑–Ω–∞'))
	dp.register_message_handler(clan_increase_rank, lambda message: message.text.lower().startswith('–∫–ª–∞–Ω –ø–æ–≤—ã—Å–∏—Ç—å'))
	dp.register_message_handler(clan_lower_rank, lambda message: message.text.lower().startswith('–∫–ª–∞–Ω –ø–æ–Ω–∏–∑–∏—Ç—å'))

	commands.clans.clan.reg(dp)
	commands.clans.settings.reg(dp)