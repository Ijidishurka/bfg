from datetime import datetime, timedelta
from aiogram import Dispatcher, types
from assets.antispam import antispam
from commands.basic.bank.db import *
from assets.transform import transform_int as tr
from user import BFGuser, BFGconst


async def bank_pc(status):
    status_info = {
        0: {"p": 6, "c": 5, "st": "–û–±—ã—á–Ω—ã–π"},
        1: {"p": 8, "c": 4.5, "st": "Standart VIP"},
        2: {"p": 10, "c": 3.5, "st": "Gold VIP"},
        3: {"p": 12, "c": 3, "st": "Platinum VIP"},
        4: {"p": 15, "c": 2.5, "st": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"}
    }

    info = status_info.get(status, status_info[0])
    return info["p"], info["c"], info["st"]


async def dep_comsa(status):
    status_info = {
        0: {"c": 0.05, "p": 5},
        1: {"c": 0.045, "p": 4.5},
        2: {"c": 0.035, "p": 3.5},
        3: {"c": 0.03, "p": 3},
        4: {"c": 0.025, "p": 2.5}
    }

    info = status_info.get(status, {"c": 0, "p": 0})
    return info["c"], info["p"]


async def get_summ(msg, balance):
    if msg[2] in ['–≤—Å–µ', '–≤—Å—ë']:
        return balance
    else:
        summ = msg[2].replace('–µ', 'e')
        return int(float(summ))


@antispam
async def bank_cmd(message: types.Message, user: BFGuser):
    p, c, st = await bank_pc(user.status)

    if int(user.depozit) == 0:
        timedepozit = '–ù–µ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞'
    else:
        timedepozit = datetime.fromtimestamp(user.depozit_time)
        timedepozit += timedelta(days=3)
        timedepozit = timedepozit.strftime('%Y-%m-%d –≤ %H:%M:%S')

    await message.answer(f'''{user.url}, –≤–∞—à –±–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á—ë—Ç:
üë´ –í–ª–∞–¥–µ–ª–µ—Ü: {user.name}
üí∞ –î–µ–Ω—å–≥–∏ –≤ –±–∞–Ω–∫–µ: {user.bank.tr()}$
üíé –°—Ç–∞—Ç—É—Å: {st}
   „ÄΩ –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–¥ –¥–µ–ø–æ–∑–∏—Ç: {p}%
   üí± –ö–æ–º–∏—Å—Å–∏—è –±–∞–Ω–∫–∞: {c}%
   üíµ –ü–æ–¥ –¥–µ–ø–æ–∑–∏—Ç–æ–º: {user.depozit.tr()}$
   ‚è≥ –ú–æ–∂–Ω–æ —Å–Ω—è—Ç—å: {timedepozit}

{BFGconst.ads}''', disable_web_page_preview=True)


@antispam
async def putbank(message: types.Message, user: BFGuser):
    win, lose = BFGconst.emj()

    try:
        msg = message.text.split()
        if len(msg) < 3:
            return
        summ = await get_summ(msg, user.balance)
    except:
        return

    summ, balance = Decimal(str(summ)), Decimal(str(user.balance))

    if summ > balance:
        await message.answer(f'{user.url}, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª–æ–∂–∏—Ç—å –≤ –±–∞–Ω–∫ –±–æ–ª—å—à–µ —á–µ–º —É –≤–∞—Å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ {lose}')
        return

    if summ <= 0:
        await message.answer(f'{user.url}, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª–æ–∂–∏—Ç—å –≤ –±–∞–Ω–∫ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é —Å—É–º–º—É –¥–µ–Ω–µ–≥ {lose}')
        return

    await user.balance.upd(summ, '-')
    await user.bank.upd(summ, '+')
    await message.answer(f'{user.url}, –≤—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª–æ–∂–∏–ª–∏ –Ω–∞ –±–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á—ë—Ç {tr(summ)}$ {win}')


@antispam
async def takeoffbank(message: types.Message, user: BFGuser):
    win, lose = BFGconst.emj()

    try:
        msg = message.text.split()
        if len(msg) < 3:
            return
        summ = await get_summ(msg, user.bank)
    except:
        return

    summ, balance = Decimal(str(summ)), Decimal(str(user.bank))

    if summ > balance:
        await message.answer(f'{user.url}, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–Ω—è—Ç—å —Å –±–∞–Ω–∫–∞ –±–æ–ª—å—à–µ —á–µ–º —É –≤–∞—Å –µ—Å—Ç—å {lose}')
        return

    if summ <= 0:
        await message.answer(f'{user.url}, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–Ω—è—Ç—å —Å –±–∞–Ω–∫–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é —Å—É–º–º—É –¥–µ–Ω–µ–≥ {lose}')
        return

    await user.bank.upd(summ, '-')
    await user.balance.upd(summ, '+')
    await message.answer(f'{user.url}, –≤—ã —É—Å–ø–µ—à–Ω–æ —Å–Ω—è–ª–∏ —Å –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á—ë—Ç–∞ {tr(summ)}$ {win}')


@antispam
async def pudepozit(message: types.Message, user: BFGuser):
    p, c, st = await bank_pc(user.status)
    win, lose = BFGconst.emj()

    try:
        msg = message.text.split()
        if len(msg) < 3:
            return
        summ = await get_summ(msg, user.balance)
    except:
        return

    if summ < 1000:
        await message.answer(f'{user.url}, –≤–∞—à –≤–∑–Ω–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 1000$ {lose}')
        return

    if int(user.depozit) != 0:
        await message.answer(f'{user.url}, —É –≤–∞—Å —É–∂–µ –æ—Ç–∫—Ä—ã—Ç –¥–µ–ø–æ–∑–∏—Ç. –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç—å –µ–≥–æ {lose}')
        return

    if summ > int(user.balance):
        await message.answer(f'{user.url}, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª–æ–∂–∏—Ç—å –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç –±–æ–ª—å—à–µ —á–µ–º —É –≤–∞—Å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ {lose}')
        return

    comsa = int(summ * 0.15)
    csumm = int(summ - comsa)

    dt = int(datetime.now().timestamp())
    
    await putdep_db(user.user_id, dt)
    await user.balance.upd(summ, '-')
    await user.depozit.upd(csumm, '+')

    await message.answer(f'{user.url}, –≤—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª–æ–∂–∏–ª–∏ –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç–Ω—ã–π —Å—á—ë—Ç {tr(summ)}$ –ø–æ–¥ {p}% {win}.\n\n'
                         f'–í—ã –∑–∞–ø–ª–∞—Ç–∏–ª–∏ –∫–æ–º–∏—Å—Å–∏—é –≤ —Ä–∞–∑–º–µ—Ä–µ {tr(comsa)}$ (1.5%) –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —É—Å–ª—É–≥.')


@antispam
async def takeoffdepozit(message: types.Message, user: BFGuser):
    win, lose = BFGconst.emj()
    balance = int(user.depozit)

    timedepozit = datetime.fromtimestamp(user.depozit_time)
    timedepozit += timedelta(days=3)
    dt = datetime.now().timestamp()

    c, p = await dep_comsa(user.status)

    try:
        msg = message.text.split()
        if len(msg) < 3:
            return
        summ = await get_summ(msg, balance)
    except:
        return

    if int(timedepozit.timestamp()) > dt:
        await message.answer(f'{user.url}, —É –≤–∞—Å —É–∂–µ –æ—Ç–∫—Ä—ã—Ç –¥–µ–ø–æ–∑–∏—Ç. –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–Ω—è—Ç—å —Å –Ω–µ–≥–æ –¥–µ–Ω—å–≥–∏ —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ {lose}')
        return

    if summ > balance:
        await message.answer(f'{user.url}, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–Ω—è—Ç—å —Å –¥–µ–ø–æ–∑–∏—Ç–∞ –±–æ–ª—å—à–µ —á–µ–º —É –≤–∞—Å –µ—Å—Ç—å {lose}')
        return

    if summ <= 0:
        await message.answer(f'{user.url}, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–Ω—è—Ç—å —Å –¥–µ–ø–æ–∑–∏—Ç–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é —Å—É–º–º—É –¥–µ–Ω–µ–≥ {lose}')
        return

    if summ < 100:
        await message.answer(f'{user.url}, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–Ω—è—Ç—å –º–µ–Ω—å—à–µ 100$ {lose}')
        return
    
    await user.depozit.upd(0)

    if summ < balance:
        ost = balance - summ
        await user.bank.upd(ost, '+')

    comsa = int(summ * float(c))
    csumm = int(summ - comsa)

    await user.balance.upd(csumm, '+')
    await message.answer(f'''{user.url}, –≤—ã —É—Å–ø–µ—à–Ω–æ —Å–Ω—è–ª–∏ —Å –¥–µ–ø–æ–∑–∏—Ç–Ω–æ–≥–æ —Å—á—ë—Ç–∞ {tr(csumm)}$ üòÅ

–£—á—Ç–∏—Ç–µ, —Å–Ω—è–≤ –¥–µ–Ω—å–≥–∏ –≤—ã –∑–∞–∫—Ä—ã–ª–∏ —Å–≤–æ–π –¥–µ–ø–æ–∑–∏—Ç–Ω—ã–π —Å—á—ë—Ç. –ß—Ç–æ–±—ã –µ–≥–æ –≤–Ω–æ–≤—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ –ø–æ–¥ –¥–µ–ø–æ–∑–∏—Ç –ª—é–±—É—é —Å—É–º–º—É.

–í—ã –∑–∞–ø–ª–∞—Ç–∏–ª–∏ –Ω–∞–ª–æ–≥ –≤ —Ä–∞–∑–º–µ—Ä–µ {tr(comsa)}$ ({p}%) –∑–∞ —Å–Ω—è—Ç–∏–µ –¥–µ–Ω–µ–≥ —Å –¥–µ–ø–æ–∑–∏—Ç–∞.''')


def reg(dp: Dispatcher):
    dp.register_message_handler(putbank, lambda message: message.text.lower().startswith('–±–∞–Ω–∫ –ø–æ–ª–æ–∂–∏—Ç—å'))
    dp.register_message_handler(takeoffbank, lambda message: message.text.lower().startswith('–±–∞–Ω–∫ —Å–Ω—è—Ç—å'))
    dp.register_message_handler(pudepozit, lambda message: message.text.lower().startswith('–¥–µ–ø–æ–∑–∏—Ç –ø–æ–ª–æ–∂–∏—Ç—å'))
    dp.register_message_handler(takeoffdepozit, lambda message: message.text.lower().startswith('–¥–µ–ø–æ–∑–∏—Ç —Å–Ω—è—Ç—å'))
    dp.register_message_handler(bank_cmd, lambda message: message.text.lower() == '–±–∞–Ω–∫')