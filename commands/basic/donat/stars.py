import time

from aiogram import Dispatcher, types, F
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import LabeledPrice, PreCheckoutQuery

from assets.antispam import new_earning, antispam_earning, antispam
from filters.custom import StartsWith
from assets import keyboards as kb
from commands.basic.donat import db
from states.stars import InvoiceState
from user import BFGuser
from utils.settings import get_setting
from bot import bot


@antispam
async def help_cmd(message: types.Message):
    await message.answer(text="‚ÄºÔ∏è <b>–í—Å–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω—ã –∏ –Ω–µ –ø–æ–¥–ª–µ–∂–∞—Ç –≤–æ–∑–≤—Ä–∞—Ç—É!</b>")


@antispam_earning
async def donat_cmd(call: types.CallbackQuery, state: FSMContext):
    if not get_setting(key="stars_donat", default=False):
        return

    user_id = call.from_user.id

    text = (
        "‚≠ê –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –¥–æ–Ω–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram Stars –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é.\n\n"
        "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 500)."
    )

    await call.message.edit_text(text=text, reply_markup=kb.donat_select_amount(user_id=user_id))
    await state.update_data(
        user_id=user_id,
        chat_id=call.message.chat.id,
        message_id=call.message.message_id
    )
    await state.set_state(InvoiceState.amount)


@antispam_earning
async def check_keyboard_amount_cmd(call: types.CallbackQuery):
    user_id = call.from_user.id
    stars = int(call.data.split("_")[1].split("|")[0])

    text = (
        f"üí∞ –í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–æ–Ω–∞—Ç–∏—Ç—å <b>{stars}‚≠ê</b> —á–µ—Ä–µ–∑ Telegram Stars?\n"
        f"üìç –í—ã –ø–æ–ª—É—á–∏—Ç–µ <b>{stars} B-Coins</b>.\n\n"
        "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ."
    )

    await call.message.edit_text(text=text, reply_markup=kb.confirm_donat(user_id=user_id, stars=stars))


@antispam
async def check_amount_cmd(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    chat_id = message.chat.id
    message_id = message.reply_to_message.message_id

    if not message.reply_to_message or not message.reply_to_message.text.startswith("‚≠ê –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è"):
        return

    data = await state.get_data()

    if data["user_id"] != user_id or data["chat_id"] != chat_id or data["message_id"] != message_id:
        return

    try:
        stars = int(message.text)
    except:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return

    if stars <= 0:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return

    if stars > 25_000:
        await message.answer("‚ùå –ó–∞ —Ä–∞–∑ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –Ω–µ –±–æ–ª–µ–µ 25000 B-Coins.")
        return

    await state.clear()

    text = (
        f"üí∞ –í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–æ–Ω–∞—Ç–∏—Ç—å <b>{stars}‚≠ê</b> —á–µ—Ä–µ–∑ Telegram Stars?\n"
        f"üìç –í—ã –ø–æ–ª—É—á–∏—Ç–µ <b>{stars} B-Coins</b>.\n\n"
        "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ."
    )

    await bot.delete_message(chat_id=chat_id, message_id=message_id)
    await message.delete()

    msg = await message.answer(text=text, reply_markup=kb.confirm_donat(user_id=user_id, stars=stars))
    await new_earning(msg=msg)


@antispam_earning
async def buy_stars_cmd(call: types.CallbackQuery):
    if not get_setting(key="stars_donat", default=False):
        return

    amount = int(call.data.split("_")[1].split("|")[0])

    await call.message.delete()

    await call.message.answer_invoice(
        title="üìó –ü–æ–∫—É–ø–∫–∞ B-Coins",
        description=f"{amount} B-Coins —á–µ—Ä–µ–∑ Telegram Stars",
        prices=[LabeledPrice(label="XTR", amount=amount)],
        provider_token="",
        payload=f"{amount}_stars",
        currency="XTR"
    )


async def on_pre_checkout_query(pre_checkout_query: PreCheckoutQuery):
    if get_setting(key="stars_donat", default=False):
        await pre_checkout_query.answer(ok=True)
    else:
        await pre_checkout_query.answer(ok=False)


async def on_successful_payment(message: types.Message):
    user_id = message.from_user.id
    amount = message.successful_payment.total_amount

    text = f"üí∞ <b>–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ!</b>\n\n–ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ <b>{amount} B-coins</b>"
    message_effect_id = "5104841245755180586" if message.chat.type == "private" else None

    await message.answer(text=text, message_effect_id=message_effect_id)

    await db.new_pay(
        user_id=user_id,
        amount=amount,
        transaction_id=message.successful_payment.telegram_payment_charge_id
    )


@antispam_earning
async def refund_cmd(call: types.CallbackQuery):
    user_id = call.from_user.id
    page = int(call.data.split("_")[1].split("|")[0])

    if not get_setting(key="refund", default=False) or page <= 0:
        await call.answer(text="")
        return

    transactions = await db.get_transactions_to_refund(user_id=user_id)

    if not transactions:
        await call.answer(text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.", show_alert=True)
        return

    max_page = (len(transactions) + 4) // 5 if transactions else 1

    if max_page < page:
        await call.answer(text="")
        return

    text = (
        "‚≠ê –í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞:\n"
        "<i>–í–æ–∑–≤—Ä–∞—Ç –≤–æ–∑–º–æ–∂–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏, –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ B-coins –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.</i>"
    )

    await call.message.edit_text(text=text, reply_markup=kb.donat_select_refund(user_id=user_id, transactions=transactions, page=page))


@antispam_earning
async def start_refund_cmd(call: types.CallbackQuery, user: BFGuser):
    user_id = call.from_user.id
    donat_id = int(call.data.split("_")[1].split("|")[0])

    if not get_setting(key="refund", default=False):
        return

    transaction = await db.get_transaction(donat_id=donat_id)

    if not transaction or transaction[1] != user_id or transaction[5] == 1:
        return

    if transaction[4] < int(time.time() - 84600):
        await call.answer(text="‚åõÔ∏è –í—Ä–µ–º—è, –æ—Ç–≤–µ–¥—ë–Ω–Ω–æ–µ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç, —É–∂–µ –∏—Å—Ç–µ–∫–ª–æ.", show_alert=True)
        return

    if user.bcoins.get() < transaction[2]:
        await call.answer(text="‚ùå –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ B-coins!", show_alert=True)
        return

    try:
        await bot.refund_star_payment(
            user_id=call.from_user.id,
            telegram_payment_charge_id=transaction[3]
        )
        await call.message.edit_text(text=f"‚úÖ –ó–≤—ë–∑–¥—ã –∑–∞ –ø–æ–∫—É–ø–∫—É –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å. –°–ø–∏—Å–∞–Ω–æ <b>{transaction[2]} B-coins</b>.")
        await db.new_refund(user_id=user_id, amount=transaction[2], donat_id=transaction[0])
    except TelegramBadRequest as error:
        if "CHARGE_ALREADY_REFUNDED" in error.message:
            text = "‚ùå –≠—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–∞."
        else:
            text = "‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."

        await call.message.edit_text(text=text)


def reg(dp: Dispatcher):
    dp.message.register(help_cmd, Command("paysupport"))

    dp.callback_query.register(donat_cmd, StartsWith("donat-stars"))

    dp.callback_query.register(check_keyboard_amount_cmd, StartsWith("select-stars"))
    dp.message.register(check_amount_cmd, InvoiceState.amount)

    dp.callback_query.register(buy_stars_cmd, StartsWith("buy-stars"))
    dp.pre_checkout_query.register(on_pre_checkout_query)
    dp.message.register(on_successful_payment, F.successful_payment)

    dp.callback_query.register(refund_cmd, StartsWith("refund"))
    dp.callback_query.register(start_refund_cmd, StartsWith("start-refund"))
