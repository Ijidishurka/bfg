from decimal import Decimal

from aiogram import types, Dispatcher

from commands.db import getperevod, url_name
from commands.admin.db import give_bcoins_db, give_money_db
from filters.custom import TextIn, StartsWith
from user import BFGuser, BFGconst
from assets.transform import transform_int as tr
from commands.admin.loger import new_log
from assets.antispam import antispam, admin_only
import config as cfg


def get_limit_cmd(status: int) -> int:
    """–ü–æ–ª—É—á–∏—Ç—å –ª–∏–º–∏—Ç –Ω–∞ –¥–Ω–µ–≤–Ω—É—é –ø–µ—Ä–µ–¥–∞—á—É"""
    if status == 1:
        return 300_000_000_000_000
    elif status == 2:
        return 750_000_000_000_000
    elif status == 3:
        return 1_000_000_000_000_000
    elif status == 4:
        return 30_000_000_000_000_000
    return 150_000_000_000_000  # –î–ª—è —Å—Ç–∞—Ç—É—Å–∞ "–∏–≥—Ä–æ–∫" (0)


@antispam
async def transfer_cmd(message: types.Message, user: BFGuser):
    user_id = message.from_user.id
    win, lose = BFGconst.emj()
    limit = get_limit_cmd(user.status)

    try:
        reply_user_id = message.reply_to_message.from_user.id
        url2 = await url_name(reply_user_id)
    except:
        await message.reply(f'{user.url}, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –¥–µ–Ω—å–≥–∏ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {lose}')
        return

    if user_id == reply_user_id:
        return

    try:
        summ = message.text.split()[1].replace('–µ', 'e')
        summ = int(float(summ))
    except:
        await message.reply(f'{user.url}, –≤—ã –Ω–µ –≤–≤–µ–ª–∏ —Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –∏–≥—Ä–æ–∫—É {lose}')
        return

    limit = Decimal(str(limit)) + Decimal(int(user.perlimit))
    d_per = Decimal(int(user.per)) + Decimal(str(summ))

    if d_per > limit:
        await message.reply(f'{user.url}, –≤—ã —É–∂–µ –∏—Å—á–µ—Ä–ø–∞–ª–∏ —Å–≤–æ–π –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –ø–µ—Ä–µ–¥–∞—á–∏ –¥–µ–Ω–µ–≥')
        return

    if summ > 0:
        if int(user.balance) >= summ:
            await message.answer(f'–í—ã –ø–µ—Ä–µ–¥–∞–ª–∏ {tr(summ)}$ –∏–≥—Ä–æ–∫—É {url2} {win}')
            await getperevod(summ, user_id, reply_user_id)
            await new_log(f'#–ø–µ—Ä–µ–≤–æ–¥\n{user_id}\n–°—É–º–º–∞: {tr(summ)}\n–ü–µ—Ä–µ–¥–∞–ª: {reply_user_id}', 'money_transfers')
        else:
            await message.reply(f'{user.url}, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –±–æ–ª—å—à–µ —á–µ–º —É –≤–∞—Å –µ—Å—Ç—å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ {lose}')

    else:
        await message.reply(f'{user.url}, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∏–≥—Ä–æ–∫—É {lose}')


@antispam
async def limit_cmd(message: types.Message, user: BFGuser):
    limit = get_limit_cmd(user.status)

    limit = int(limit) + int(user.perlimit)
    per = int(user.per)
    ost = limit - per

    await message.reply(f'''{user.url}, –∑–¥–µ—Å—å –≤–∞—à –ª–∏–º–∏—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {tr(limit)}$
üí´ –í—ã —É–∂–µ –ø–µ—Ä–µ–¥–∞–ª–∏: {tr(per)}$
üöÄ –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å: {tr(ost)}$ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏!''')


@antispam
async def give_money(message: types.Message, user: BFGuser):
    win, lose = BFGconst.emj()

    if not (user.user_id in cfg.admin or user.status == 4):
        await message.answer(
            'üëÆ‚Äç‚ôÇÔ∏è –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞ —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É.\n'
            '–î–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É "–î–æ–Ω–∞—Ç"')
        return

    try:
        r_user_id = message.reply_to_message.from_user.id
        r_url = await url_name(r_user_id)
    except:
        await message.answer(f'{user.url}, —á—Ç–æ–±—ã –≤—ã–¥–∞—Ç—å –¥–µ–Ω—å–≥–∏ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {lose}')
        return

    try:
        summ = message.text.split()[1].replace('–µ', 'e')
        summ = int(float(summ))
    except:
        await message.answer(f'{user.url}, –≤—ã –Ω–µ –≤–≤–µ–ª–∏ —Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å {lose}')
        return

    if user.user_id in cfg.admin:
        await give_money_db(user.user_id, r_user_id, summ, 'rab')
        await message.answer(f'{user.url}, –≤—ã –≤—ã–¥–∞–ª–∏ {tr(summ)}$ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {r_url}  {win}')
    else:
        res = await give_money_db(user.user_id, r_user_id, summ, 'adm')
        if res == 'limit':
            await message.answer(f'{user.url}, –≤—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –Ω–∞ –≤—ã–¥–∞—á—É –¥–µ–Ω–µ–≥  {lose}')
            return

        await message.answer(f'{user.url}, –≤—ã –≤—ã–¥–∞–ª–∏ {tr(summ)}$ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {r_url}  {win}')

    await new_log(f'#–≤—ã–¥–∞—á–∞\n–ò–≥—Ä–æ–∫ {user.user_id}\n–°—É–º–º–∞: {tr(summ)}$\n–ò–≥—Ä–æ–∫—É {r_user_id}', 'issuance_money')  # new log


@admin_only()
async def give_bcoins(message: types.Message, user: BFGuser):
    user_id = message.from_user.id
    win, lose = BFGconst.emj()

    try:
        r_user_id = message.reply_to_message.from_user.id
        r_url = await url_name(user_id)
    except:
        await message.answer(f'{user.url}, —á—Ç–æ–±—ã –≤—ã–¥–∞—Ç—å –¥–µ–Ω—å–≥–∏ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {lose}')
        return

    try:
        summ = message.text.split()[1].replace('–µ', 'e')
        summ = int(float(summ))
    except:
        await message.answer(f'{user.url}, –≤—ã –Ω–µ –≤–≤–µ–ª–∏ —Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å {lose}')
        return

    await give_bcoins_db(r_user_id, summ)
    await message.answer(f'{user.url}, –≤—ã –≤—ã–¥–∞–ª–∏ {tr(summ)}üí≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {r_url}  {win}')
    await new_log(f'#–±–∫–æ–∏–Ω-–≤—ã–¥–∞—á–∞\n–ê–¥–º–∏–Ω {user_id}\n–°—É–º–º–∞: {tr(summ)}$\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {r_user_id}', 'issuance_bcoins')


def reg(dp: Dispatcher):
    dp.message.register(limit_cmd, TextIn("–º–æ–π –ª–∏–º–∏—Ç"))
    dp.message.register(transfer_cmd, StartsWith("–¥–∞—Ç—å"))
    dp.message.register(give_money, StartsWith("–≤—ã–¥–∞—Ç—å"))
    dp.message.register(give_bcoins, StartsWith("–±–¥–∞—Ç—å"))
