import random
from aiogram import Dispatcher, types
import commands.entertaining.case.db as db
from assets.transform import transform_int as tr
from assets.antispam import antispam
from user import BFGuser, BFGconst


@antispam
async def getcase_cmd(message: types.Message, user: BFGuser):
    ycase = {
        "case1": {"name": "üì¶ –û–±—ã—á–Ω—ã–π –∫–µ–π—Å", "quantity": user.case[1].get()},
        "case2": {"name": "üèµ –ó–æ–ª–æ—Ç–æ–π –∫–µ–π—Å", "quantity": user.case[2].get()},
        "case3": {"name": "üè∫ –†—É–¥–Ω—ã–π –∫–µ–π—Å", "quantity": user.case[3].get()},
        "case4": {"name": "üåå –ú–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–π –∫–µ–π—Å", "quantity": user.case[4].get()},
    }

    positive_resources = {name: info for name, info in ycase.items() if info["quantity"] > 0}

    if positive_resources:
        result_message = "\n".join(
            [f'{info["name"]} - {tr(info["quantity"])} —à—Ç.' for name, info in positive_resources.items()])
        txt = f"{result_message}\n\nüîê –î–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ - ¬´–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å [1/2/3/4] [–∫–æ–ª-–≤–æ]¬ª"
    else:
        txt = f"üòï –£ –≤–∞—Å –Ω–µ—Ç—É –∫–µ–π—Å–æ–≤."

    await message.answer(f'''{user.url}, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–µ–π—Å—ã:
üéÅ 1. –û–±—ã—á–Ω—ã–π –∫–µ–π—Å ‚Äî 750 –∫–≤–¥—Ä $
üéÅ 2. –ó–æ–ª–æ—Ç–æ–π –∫–µ–π—Å - 5 –∫–≤–Ω—Ç $
üéÅ 3. –†—É–¥–Ω—ã–π –∫–µ–π—Å - 50 ‚öôÔ∏è
üéÅ 4. –ú–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–π –∫–µ–π—Å - 200 üåå

{txt}
üõí –î–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–≤–µ–¥–∏—Ç–µ ¬´–ö—É–ø–∏—Ç—å –∫–µ–π—Å [1/2/3] [–∫–æ–ª-–≤–æ]¬ª

{BFGconst.ads}''', disable_web_page_preview=True)


@antispam
async def buy_case(message: types.Message, user: BFGuser):
    win, lose = BFGconst.emj()
    
    try:
        case = int(message.text.split()[2])
    except:
        await message.answer(f'{user.url}, –≤—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫–µ–π—Å–æ–≤ {lose}')
        return
    
    try:
        arg = int(message.text.split()[3])
    except:
        arg = 1
    
    if arg <= 0:
        return
    
    if case == 1:
        summ = 750_000_000_000_000_000 * arg
        
        if summ > int(user.balance):
            await message.answer(f'{user.url}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–∞–Ω–Ω–æ–≥–æ –∫–µ–π—Å–∞ {lose}')
            return
        
        await user.balance.upd(summ, '-')
        await user.case[1].upd(case, '+')
        await message.answer(f'{user.url}, –≤—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ {arg} ¬´–û–±—ã—á–Ω—ã–π –∫–µ–π—Å¬ª –∑–∞ {tr(summ)}$ ‚úÖ')
    
    elif case == 2:
        summ = 5_000_000_000_000_000_000 * arg
        
        if summ > int(user.balance):
            await message.answer(f'{user.url}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–∞–Ω–Ω–æ–≥–æ –∫–µ–π—Å–∞ {lose}')
            return
        
        await user.balance.upd(summ, '-')
        await user.case[2].upd(case, '+')
        await message.answer(f'{user.url}, –≤—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ {arg} ¬´–ó–æ–ª–æ—Ç–æ–π –∫–µ–π—Å¬ª –∑–∞ {tr(summ)}$ ‚úÖ')
    
    elif case == 3:
        summ = 50 * case
        
        if summ > user.mine.titanium:
            await message.answer(f'{user.url}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–∞–Ω–Ω–æ–≥–æ –∫–µ–π—Å–∞ {lose}')
            return
        
        await message.answer(f'{user.url}, –≤—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ {case} ¬´–†—É–¥–Ω—ã–π –∫–µ–π—Å¬ª –∑–∞ {tr(summ)}‚öôÔ∏è ‚úÖ')
        await user.case[3].upd(case, '+')
        await user.mine.titanium.upd(summ, '-')
    
    elif case == 4:
        summ = 200 * case
        
        if summ > user.mine.matter:
            await message.answer(f'{user.url}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–∞–Ω–Ω–æ–≥–æ –∫–µ–π—Å–∞ {lose}')
            return
        
        await message.answer(f'{user.url}, –≤—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ {case} ¬´–ú–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–π –∫–µ–π—Å¬ª –∑–∞ {tr(summ)}üåå ‚úÖ')
        await user.case[4].upd(case, '+')
        await user.mine.matter.upd(summ, '-')


@antispam
async def open_case(message: types.Message, user: BFGuser):
    win, lose = BFGconst.emj()

    try:
        case = int(message.text.split()[2])
    except:
        await message.answer(f'{user.url}, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–µ–π—Å–∞ {lose}')
        return

    if case not in range(1, 5):
        await message.answer(f'{user.url}, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–µ–π—Å–∞ {lose}')
        return

    try:
        u = int(message.text.split()[3])
    except:
        u = 1

    ncase = int({1: user.case[1], 2: user.case[2], 3: user.case[3], 4: user.case[4]}.get(case, 0))
    climit = {0: 10, 1: 20, 2: 40, 3: 60, 4: 100}.get(user.status, 10)

    if u <= 0:
        await message.answer(f'üéÅ | {user.url}, –Ω–µ–ª—å–∑—è –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–µ–π—Å–æ–≤! {lose}\n\n{BFGconst.ads}', disable_web_page_preview=True)
        return

    if ncase < u:
        await message.answer(f'üéÅ | {user.url}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–µ–π—Å–æ–≤! {lose}\n\n{BFGconst.ads}', disable_web_page_preview=True)
        return

    if climit < u:
        await message.answer(f'üéÅ | {user.url}, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –±–æ–ª–µ–µ {climit} –∫–µ–π—Å–æ–≤ –∑–∞ —Ä–∞–∑! {lose}\n\n{BFGconst.ads}', disable_web_page_preview=True)
        return

    await open_case_logic(message, u, case, user)
    
    
async def open_case_logic(message, u, case, user):
    coff = 11 if case == 2 else 1
    smoney = srating = sexpe = stitan = spalladium = smatter = 0
    txt = ''
    
    for _ in range(u):
        prize = random.randint(1, 100)

        if case in [1, 2]:
            if prize in range(1, 45):
                smoney += random.randint(100_000_000_000_000_000, 1_000_000_000_000_000_000) * coff
            elif prize in range(45, 70):
                srating += random.randint(5_000_000, 150_000_000) * coff
            else:
                sexpe += random.randint(100, 250) * coff
                
        elif case == 3:
            if prize in range(1, 5):
                spalladium += random.randint(1, 3)
            if prize in range(5, 30):
                smoney += random.randint(100_000_000_000_000_000, 1_000_000_000_000_000_000)
            elif prize in range(30, 60):
                srating += random.randint(5_000_000, 150_000_000)
            elif prize in range(60, 80):
                stitan += random.randint(30, 80)
            else:
                sexpe += random.randint(100, 250)
                
        elif case == 4:
            if prize in range(1, 30):
                smoney += random.randint(100_000_000_000_000_000, 1_000_000_000_000_000_000)
            elif prize in range(30, 60):
                srating += random.randint(5_000_000, 150_000_000)
            elif prize in range(60, 80):
                smatter += random.randint(30, 80)
            else:
                sexpe += random.randint(100, 250)
                
    if smoney > 0:
        await db.open_case_db(user.user_id, smoney, 'balance')
        txt += f'üî• –ò—Ç–æ–≥–æ –¥–µ–Ω–µ–≥ - {tr(smoney)}$\n'

    if srating > 0:
        await db.open_case_db(user.user_id, srating, 'rating')
        txt += f'üëë –ò—Ç–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ - {tr(srating)}\n'

    if sexpe > 0:
        await db.open_case_db(user.user_id, sexpe, 'exp')
        txt += f'üèÜ –ò—Ç–æ–≥–æ –æ–ø—ã—Ç–∞ - {tr(sexpe)}—à—Ç\n'

    if stitan > 0:
        await db.open_case_db(user.user_id, stitan, 'titanium', table='mine')
        txt += f'‚öôÔ∏è –ò—Ç–æ–≥–æ —Ç–∏—Ç–∞–Ω–∞ - {tr(stitan)}—à—Ç\n'

    if spalladium > 0:
        await db.open_case_db(user.user_id, spalladium, 'palladium', table='mine')
        txt += f'‚öóÔ∏è –ò—Ç–æ–≥–æ –ø–∞–ª–ª–∞–¥–∏—è - {tr(spalladium)}—à—Ç\n'
        
    if smatter > 0:
        await db.open_case_db(user.user_id, smatter, 'matter', table='mine')
        txt += f'üåå –ò—Ç–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∏ - {tr(smatter)}—à—Ç\n'

    await db.open_case2_db(user.user_id, u, f'case{case}')
    await message.answer(f'üéÅ | {user.url}, –≤–∞–º –≤—ã–ø–∞–ª–æ:\n\n{txt}\n\n{BFGconst.ads}', disable_web_page_preview=True)


def reg(dp: Dispatcher):
    dp.register_message_handler(getcase_cmd, lambda message: message.text.lower() == '–∫–µ–π—Å—ã')
    dp.register_message_handler(buy_case, lambda message: message.text.lower().startswith('–∫—É–ø–∏—Ç—å –∫–µ–π—Å'))
    dp.register_message_handler(open_case, lambda message: message.text.lower().startswith('–æ—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å'))