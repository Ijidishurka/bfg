from aiogram import types, Dispatcher
import commands.entertaining.earnings.garden.db as db
from assets.transform import transform_int as tr
from assets import kb
from assets.antispam import antispam_earning, antispam, new_earning
from bot import bot
from user import BFGuser, BFGconst


@antispam
async def garden_info(message: types.Message, user: BFGuser):
    await message.answer(f'''{user.url}, —Å –¥–∞–Ω–Ω–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ —Ç—ã –º–æ–∂–µ—à—å —Å–∞–º –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ–π —Å–∞–¥ –∏ —É–ª—É—á—à–∞—Ç—å –µ–≥–æ. –≠—Ç–æ –æ—á–µ–Ω—å –≤–µ—Å–µ–ª–æ –∏ –æ–±–ª–µ–≥—á–∏—Ç —Ç–µ–±–µ —Ä–∞–±–æ—Ç—É.

ü™ì –î–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ–π —Å–∞–¥, —Ü–µ–Ω–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ 1.000.000.000$. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–∞–¥" –∏ –ø–æ—Å–ª–µ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É "–ú–æ–π —Å–∞–¥" –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –µ–≥–æ –∏ —É–ª—É—á—à–∞—Ç—å –ø–æ–≤—ã—à–∞—è —Å–≤–æ—é –ø—Ä–∏–±—ã–ª—å.

üìé –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã —Å–∞–¥–æ–≤ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É "–ü–æ–º–æ—â—å" –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É.''')


@antispam
async def my_garden(message: types.Message, user: BFGuser):
    win, lose = BFGconst.emj()
    garden = user.garden

    if not garden:
        await message.answer(f'{user.url}, —É –≤–∞—Å –Ω–µ—Ç —Å–≤–æ–µ–≥–æ —Å–∞–¥–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–∞–¥" {lose}')
        return

    await upd_garden_text(message, user, action='send')


async def upd_garden_text(call: types.CallbackQuery, user: BFGuser, action='edit'):
    garden = user.garden
    
    if action == 'edit':
        await user.update()

    dox = (garden.tree.get() + 1) * 3
    ch = int(1_000_000_000 * (1 + 0.15) ** (garden.tree.get() + 1))

    txt = f'''{user.url}, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º "–°–∞–¥":
ü•ú –î–æ—Ö–æ–¥: {tr(dox)} –∑—ë—Ä–µ–Ω/—á–∞—Å
üå≥ –î–µ—Ä–µ–≤—å—è: {garden.tree.tr()} —à—Ç./10 —à—Ç.
üÜô –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: {tr(ch)}$

üí¶ –í–æ–¥—ã: {garden.water.tr()}/100
üí∏ –ù–∞–ª–æ–≥–∏: {garden.nalogs.tr()}$/5.000.000$
üß∫ –ù–∞ —Å—á–µ—Ç—É: {garden.balance.tr()} –∑—ë—Ä–µ–Ω

‚≠ê –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø–æ–ª–∏–≤–∞—Ç—å –¥–µ—Ä–µ–≤–æ –∏–Ω–∞—á–µ –æ–Ω–æ –∑–∞—Å–æ—Ö–Ω–µ—Ç.'''
    
    try:
        if action == 'edit':
            await call.message.edit_text(text=txt, reply_markup=kb.garden(user.user_id))
        else:
            msg = await call.answer(text=txt, reply_markup=kb.garden(user.user_id))
            await new_earning(msg)
    except:
        return


@antispam
async def buy_garden(message: types.Message, user: BFGuser):
    garden = user.garden
    win, lose = BFGconst.emj()
    
    if garden:
        await message.answer(f'{user.url}, —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Å–∞–¥. –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –≤–≤–µ–¥–∏—Ç–µ "–ú–æ–π —Å–∞–¥" {lose}')
        return

    if int(user.balance) < 1_000_000_000:
        await message.answer(f'{user.url}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –°–∞–¥–∞. –ï–≥–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å 1.00.000.000$ {lose}')
        return

    await db.buy_garden(user.user_id)
    await message.answer(f'{user.url}, –≤—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ —Å–∞–¥ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –≤–≤–µ–¥–∏—Ç–µ "–ú–æ–π —Å–∞–¥" {win}')


@antispam_earning
async def buy_tree(call: types.CallbackQuery, user: BFGuser):
    garden = user.garden
    win, lose = BFGconst.emj()

    if not garden:
        return

    if garden.tree.get() == 10:
        await bot.answer_callback_query(call.id, text=f'{user.name}, —É –≤–∞—Å —É–∂–µ –∫—É–ø–ª–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ä–µ–≤—å–µ–≤ {lose}')
        return

    ch = int(1_000_000_000 * (1 + 0.15) ** (garden.tree.get() + 1))

    if int(user.balance) < ch:
        await bot.answer_callback_query(call.id, text=f'{user.name}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–µ—Ä–µ–≤–∞. –ï—ë —Å—Ç–æ–∏–º–æ—Å—Ç—å {tr(ch)}$ {lose}')
        return
    
    await db.buy_tree(user.user_id, ch)
    await bot.answer_callback_query(call.id, text=f'{user.name}, –≤—ã —É—Å–ø–µ—à–Ω–æ —É–≤–µ–ª–∏—á–∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ä–µ–≤—å–µ–≤ –≤ –≤–∞—à–µ–º —Å–∞–¥—É –∑–∞ {tr(ch)}$ {win}')
    await upd_garden_text(call, user)


@antispam_earning
async def withdraw_profit(call: types.CallbackQuery, user: BFGuser):
    garden = user.garden
    win, lose = BFGconst.emj()

    if not garden:
        return

    if int(garden.balance) == 0:
        await bot.answer_callback_query(call.id, text=f'{user.name}, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –≤–∞—à–µ–≥–æ —Å–∞–¥–∞ –Ω–µ—Ç –ø—Ä–∏–±—ã–ª–∏ {lose}')
        return

    await db.withdraw_profit(user.user_id, garden.balance.get())
    await bot.answer_callback_query(call.id, text=f'{user.name}, –≤—ã —É—Å–ø–µ—à–Ω–æ —Å–Ω—è–ª–∏ {garden.balance.tr()} –∑—ë—Ä–µ–Ω —Å –±–∞–ª–∞–Ω—Å–∞ –≤–∞—à–µ–≥–æ —Å–∞–¥–∞ {win}')
    await upd_garden_text(call, user)


@antispam_earning
async def water_garden_call(call: types.CallbackQuery, user: BFGuser):
    garden = user.garden
    win, lose = BFGconst.emj()

    if not garden:
        return

    if int(garden.water) >= 100:
        await bot.answer_callback_query(call.id, text=f'{user.name}, –≤—ã —É–∂–µ –ø–æ–ª–∏–ª–∏ —Å–≤–æ–π —Å–∞–¥ {lose}')
        return

    await garden.water.upd(100)
    await bot.answer_callback_query(call.id, text=f'{user.name}, –≤—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª–∏–ª–∏ —Å–≤–æ–π —Å–∞–¥ {win}')
    await upd_garden_text(call, user)


@antispam
async def water_garden(message: types.Message, user: BFGuser):
    garden = user.garden
    win, lose = BFGconst.emj()

    if not garden:
        await message.answer(f'{user.url}, —É –≤–∞—Å –Ω–µ—Ç —Å–≤–æ–µ–≥–æ —Å–∞–¥–∞ —á—Ç–æ–±—ã –ø–æ–ª–∏–≤–∞—Ç—å –¥–µ—Ä–µ–≤—å—è {lose}')
        return

    if int(garden.water) >= 100:
        await message.answer(f'{user.url}, –≤—ã —É–∂–µ –ø–æ–ª–∏–ª–∏ —Å–≤–æ–π —Å–∞–¥ {lose}')
        return

    await garden.water.upd(100)
    await message.answer(f'{user.url}, –≤—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª–∏–ª–∏ —Å–≤–æ–π —Å–∞–¥ {win}')


@antispam_earning
async def pay_taxes(call: types.CallbackQuery, user: BFGuser):
    garden = user.garden
    win, lose = BFGconst.emj()

    if not garden:
        return

    if int(user.balance) < int(garden.nalogs):
        await bot.answer_callback_query(call.id, text=f'{user.name}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ —á—Ç–æ–± –æ–ø–ª–∞—Ç–∏—Ç—å –Ω–∞–ª–æ–≥–∏ {lose}')
        return

    if int(garden.nalogs) == 0:
        await bot.answer_callback_query(call.id, text=f'{user.name}, —É –≤–∞—Å –Ω–µ—Ç –Ω–∞–ª–æ–≥–æ–≤ —á—Ç–æ–±—ã –∏—Ö –æ–ø–ª–∞—Ç–∏—Ç—å {win}')
        return

    await db.payment_taxes(user.user_id, garden.nalogs.get())
    await bot.answer_callback_query(call.id, text=f'{user.name}, –≤—ã —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏ –Ω–∞–ª–æ–≥–∏ –Ω–∞ —Å—É–º–º—É {garden.nalogs.tr()}$ —Å –≤–∞—à–µ–≥–æ –∏–≥—Ä–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ {win}')
    await upd_garden_text(call, user)


@antispam
async def sell_garden(message: types.Message, user: BFGuser):
    win, lose = BFGconst.emj()
    garden = user.garden
    
    if not garden:
        await message.answer(f'{user.url}, —É –≤–∞—Å –Ω–µ—Ç —Å–≤–æ–µ–≥–æ —Å–∞–¥–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–∞–¥" {lose}')
        return
    
    summ = 500_000_000  # –ü–æ–ª–æ–≤–∏–Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å–∞–¥–∞
    
    for i in range(1, garden.tree.get() + 1):  # –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –∑–∞ –¥–µ—Ä–µ–≤—å—è (50%)
        summ += int(1_000_000_000 * (1 + 0.15) ** (i + 1)) // 2

    await db.sell_garden(user.user_id, summ)
    await message.answer(f'{user.url}, –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–ª–∏ —Å–≤–æ–π —Å–∞–¥ –∑–∞ {tr(summ)}$ {win}')


def reg(dp: Dispatcher):
    dp.register_message_handler(water_garden, lambda message: message.text.lower().startswith('—Å–∞–¥ –ø–æ–ª–∏—Ç—å'))
    dp.register_message_handler(garden_info, lambda message: message.text.lower().startswith('—Å–∞–¥'))
    dp.register_message_handler(my_garden, lambda message: message.text.lower().startswith('–º–æ–π —Å–∞–¥'))
    dp.register_message_handler(buy_garden, lambda message: message.text.lower().startswith('–ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–∞–¥'))
    dp.register_callback_query_handler(buy_tree, text_startswith='garden-buy-tree')
    dp.register_callback_query_handler(water_garden_call, text_startswith='garden-polit')
    dp.register_callback_query_handler(withdraw_profit, text_startswith='garden-sobrat')
    dp.register_callback_query_handler(pay_taxes, text_startswith='garden-nalog')
    dp.register_message_handler(sell_garden, lambda message: message.text.lower() == '–ø—Ä–æ–¥–∞—Ç—å —Å–∞–¥')
