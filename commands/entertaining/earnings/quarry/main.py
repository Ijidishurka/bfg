from assets.antispam import new_earning, antispam, antispam_earning
from assets.transform import transform_int as tr
from aiogram import types, Dispatcher
from bot import bot
from commands.entertaining.earnings.quarry import db
from assets import kb
from user import BFGuser, BFGconst


@antispam
async def quarry_list(message: types.Message, user: BFGuser):
    await message.answer(f'''–ü—Ä–∏–≤–µ—Ç! üöÄ –ì–æ—Ç–æ–≤ –ø–æ–∫–æ—Ä–∏—Ç—å –º–∏—Ä –∫–∞—Ä—å–µ—Ä–æ–≤?

üõ† –ü–æ—Å—Ç—Ä–æ–π —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –∫–∞—Ä—å–µ—Ä –≤—Å–µ–≥–æ –∑–∞ 25 –ø–∞–ª–ª–∞–¥–∏—è! –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–ø–∏—à–∏ "<code>–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–∞—Ä—å–µ—Ä</code>". –ü–∞–ª–ª–∞–¥–∏–π –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å, –æ—Ç–∫—Ä—ã–≤ —Ä—É–¥–Ω—ã–µ –∫–µ–π—Å—ã.

üåÑ –ö–∞–∫ —Ç–æ–ª—å–∫–æ –∫–∞—Ä—å–µ—Ä –±—É–¥–µ—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω:
1. –ù–∞—á–Ω–∏ –¥–æ–±—ã—á—É —Ä–µ—Å—É—Ä—Å–æ–≤.
2. –£–ª—É—á—à–∞–π –±—É—Ä–æ–≤—ã–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏, —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å –¥–æ–±—ã—á—É.
3. –†–∞—Å—à–∏—Ä—è–π —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é –∫–∞—Ä—å–µ—Ä–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–≤–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è.

üìà –í–≤–µ–¥–∏ "–ú–æ–π –∫–∞—Ä—å–µ—Ä", —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è.

‚ùì –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å –∏–ª–∏ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã? –í–≤–µ–¥–∏ "<code>–ü–æ–º–æ—â—å</code>" –∏ –≤—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª "<code>–†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ</code>".''')


@antispam
async def my_quarry(message: types.Message, user: BFGuser):
    quarry = user.quarry
    win, lose = BFGconst.emj()
    
    if not quarry:
        await message.answer(f'{user.url}, —É –≤–∞—Å –Ω–µ—Ç —Å–≤–æ–µ–≥–æ –∫–∞—Ä—å–µ—Ä–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–∞—Ä—å–µ—Ä" {lose}')
        return
    
    await edit_quarry_msg(message, user, action='send')


async def edit_quarry_msg(call: types.CallbackQuery, user: BFGuser, action='edit'):
    quarry = user.quarry
    
    if action == 'edit':
        await user.update()

    ter_upd = quarry.territory.get() * 130
    bur_upd = quarry.bur.get() * 166

    txt = f'''
{user.url}, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –∫–∞—Ä—å–µ—Ä–µ "–ö–∞—Ä—å–µ—Ä":
üîß –£—Ä–æ–≤–µ–Ω—å: {quarry.lvl}
üß± –†–∞–∑–º–µ—Ä —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏: {quarry.territory.tr()}–º¬≤
üÜô –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: {tr(ter_upd)} üß™
üï≥ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É—Ä–æ–≤—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–æ–∫: {quarry.bur.tr()}
üÜô –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: {tr(bur_upd)} ‚öô

üí∏ –ù–∞–ª–æ–≥–∏: {quarry.nalogs.tr()}/5.000.000$'''
    
    try:
        if action == 'edit':
            await call.message.edit_text(text=txt, reply_markup=kb.quarry(user.user_id))
        else:
            msg = await call.answer(text=txt, reply_markup=kb.quarry(user.user_id))
            await new_earning(msg)
    except:
        return


@antispam
async def buy_quarry(message: types.Message, user: BFGuser):
    quarry = user.quarry
    win, lose = BFGconst.emj()
    
    if quarry:
        await message.answer(f'{user.url}, —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∫–∞—Ä—å–µ—Ä. –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –≤–≤–µ–¥–∏—Ç–µ "–ú–æ–π –∫–∞—Ä—å–µ—Ä" {lose}')
        return

    if int(user.mine.palladium) < 25:
        await message.answer(f'{user.url}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞–ª–ª–∞–¥–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ä—å–µ—Ä–∞. –ï–≥–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å 25 –ø–∞–ª–ª–∞–¥–∏—è {lose}')
        return
    
    await db.buy_quarry_db(user.user_id)
    await message.answer(f'{user.url}, –≤—ã —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏–ª–∏ –∫–∞—Ä—å–µ—Ä –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –≤–≤–µ–¥–∏—Ç–µ "–ú–æ–π –∫–∞—Ä—å–µ—Ä" {win}')


@antispam_earning
async def withdraw_profit(call: types.CallbackQuery, user: BFGuser):
    quarry = user.quarry
    win, lose = BFGconst.emj()

    if not quarry:
        return

    if int(quarry.balance) == 0:
        await bot.answer_callback_query(call.id, text=f'{user.name}, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –≤–∞—à–µ–≥–æ –∫–∞—Ä—å–µ—Ä–∞ –Ω–µ—Ç—É –ø—Ä–∏–±—ã–ª–∏ {lose}')
        return

    await db.withdraw_profit_db(user.user_id, quarry.balance.get())
    await bot.answer_callback_query(call.id, text=f'{user.name}, –≤—ã —É—Å–ø–µ—à–Ω–æ —Å–Ω—è–ª–∏ {quarry.balance.tr()}‚öóÔ∏è —Å –±–∞–ª–∞–Ω—Å–∞ –≤–∞—à–µ–≥–æ –∫–∞—Ä—å–µ—Ä–∞ {win}')
    await edit_quarry_msg(call, user)


@antispam_earning
async def payment_taxes(call: types.CallbackQuery, user: BFGuser):
    quarry = user.quarry
    win, lose = BFGconst.emj()

    if not quarry:
        return

    if int(user.balance) < int(quarry.nalogs):
        await bot.answer_callback_query(call.id, text=f'{user.name}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ —á—Ç–æ–± –æ–ø–ª–∞—Ç–∏—Ç—å –Ω–∞–ª–æ–≥–∏ {lose}')
        return

    if int(quarry.nalogs) == 0:
        await bot.answer_callback_query(call.id, text=f'{user.name}, —É –≤–∞—Å –Ω–µ—Ç –Ω–∞–ª–æ–≥–æ–≤ —á—Ç–æ–±—ã –∏—Ö –æ–ø–ª–∞—Ç–∏—Ç—å {win}')
        return

    await db.payment_taxes_db(user.user_id, quarry.nalogs.get())
    await bot.answer_callback_query(call.id, text=f'{user.name}, –≤—ã —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏ –Ω–∞–ª–æ–≥–∏ –Ω–∞ —Å—É–º–º—É {quarry.nalogs.tr()}$ —Å –≤–∞—à–µ–≥–æ –∏–≥—Ä–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ {win}')
    await edit_quarry_msg(call, user)


@antispam_earning
async def up_level(call: types.CallbackQuery, user: BFGuser):
    await bot.answer_callback_query(call.id, text=f'{user.name}, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –í–∞—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∫–∞—Ä—å–µ—Ä–∞.')


# @antispam
# async def sell_quarry(message: types.Message, user: BFGuser):
#     win, lose = BFGconst.emj()
#     quarry = user.quarry
#
#     if not quarry:
#         await message.answer(f'{user.url}, —É –≤–∞—Å –Ω–µ—Ç —Å–≤–æ–µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ {lose}')
#         return
#
#     palladium = 25
#     cobalt = titanium = 0
#
#     cobalt = (1000 * quarry.territory.get())
#
#     await db.sell_quarry(user.user_id, summ)
#     await message.answer(f'{user.url}, –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–ª–∏ —Å–≤–æ–π –∫–∞—Ä—å–µ—Ä, –ø–æ–ª—É—á–µ–Ω–æ {palladium}‚öóÔ∏è, {cobalt}üß™ –∏ {titanium}‚öôÔ∏è {win}')
    

def reg(dp: Dispatcher):
    dp.register_message_handler(my_quarry, lambda message: message.text.lower().startswith('–º–æ–π –∫–∞—Ä—å–µ—Ä'))
    dp.register_message_handler(quarry_list, lambda message: message.text.lower().startswith('–∫–∞—Ä—å–µ—Ä'))
    dp.register_message_handler(buy_quarry, lambda message: message.text.lower().startswith('–ø–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–∞—Ä—å–µ—Ä'))
    dp.register_callback_query_handler(withdraw_profit, text_startswith='quarry-sobrat')
    dp.register_callback_query_handler(payment_taxes, text_startswith='quarry-nalog')
    dp.register_callback_query_handler(up_level, text_startswith='quarry-lvl')