from aiogram import Dispatcher, types

from assets import keyboards as kb
from assets.transform import transform_int as tr
from assets.antispam import antispam_earning, new_earning, antispam
from commands.entertaining.earnings.business import db
from filters.custom import TextIn, StartsWith
from user import BFGuser, BFGconst


@antispam
async def business_info(message: types.Message, user: BFGuser):
    await message.answer(f'''{user.url}, —Ç–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è —Å–∞–º –∏ –≤–ª–∏—è—Ç—å –Ω–∞ —Å–≤–æ–π –±–∏–∑–Ω–µ—Å.

ü™ì –î–ª—è –Ω–∞—á–∞–ª–∞ —è –ø—Ä–æ–≤–µ–¥—É —Ç–µ–±–µ –º–∞–ª–µ–Ω—å–∫–∏–π –∏–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂ –ø–æ –ø–æ–≤–æ–¥—É –¥–∞–Ω–Ω—ã—Ö –±–∏–∑–Ω–µ—Å–æ–≤, —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ –∫—É–ø–∏—Ç—å –±–∏–∑–Ω–µ—Å –∏ –Ω–∞—á–∞—Ç—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω—ë–º. –¢–µ–ø–µ—Ä—å –≤–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–∞–º–æ–º—É –≤–ª–∏—è—Ç—å –Ω–∞ –¥–æ—Ö–æ–¥, —É–≤–µ–ª–∏—á–∏—Ç—å —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é –±–∏–∑–Ω–µ—Å–∞, –∑–∞–∫—É–ø–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –∏ –ø–ª–∞—Ç–∏—Ç—å –Ω–∞–ª–æ–≥–∏ –≤ –∫–∞–∑–Ω—É —à—Ç–∞—Ç–∞.

üèó –î–ª—è –Ω–∞—á–∞–ª–∞ –≤–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –ø–ª–æ—â–∞–¥–∫—É –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –≤–æ–∑–≤–µ—Å—Ç–∏ –Ω–∞ –Ω–µ–π —Å–≤–æ–π –±–∏–∑–Ω–µ—Å. –î–ª—è —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –±–∏–∑–Ω–µ—Å", –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤–∞–º–∏ –±—É–¥–µ—Ç –∫—É–ø–ª–µ–Ω–∞ –º–∞–ª–µ–Ω—å–∫–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –ø–æ–¥ –±–∏–∑–Ω–µ—Å.

üí´ –î–∞–ª–µ–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª—è—Ç—å –±–∏–∑–Ω–µ—Å–æ–º, —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å –µ–≥–æ –¥–æ—Ö–æ–¥, –ø–æ–∫—É–ø–∞—Ç—å —É–ª—É—á—à–µ–Ω–∏—è –∏ –ø—Ä–æ—á–µ–µ. –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É "–ü–æ–º–æ—â—å" –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É.''')


@antispam
async def my_business(message: types.Message, user: BFGuser):
    business = user.business
    win, lose = BFGconst.emj()
    
    if not business:
        await message.answer(f'{user.url}, —É –≤–∞—Å –Ω–µ—Ç —Å–≤–æ–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞ —á—Ç–æ–±—ã –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –±–∏–∑–Ω–µ—Å" {lose}')
        return

    await upd_business_text(message, user, action='send')


async def upd_business_text(call: types.CallbackQuery | types.Message, user: BFGuser, action='edit'):
    business = user.business
    
    if action == 'edit':
        await user.update()

    dox = int(90000000 * business.bsterritory.get() / 15)
    ch = int(22000000 * (1 + 0.15) ** (business.territory.get() - 4))
    ch2 = int(22000000 * (1 + 0.15) ** (business.bsterritory.get() - 1))

    txt = f'''{user.url}, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –±–∏–∑–Ω–µ—Å–µ "–ë–∏–∑–Ω–µ—Å":
üß± –¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è: {business.territory.tr()} –º¬≤
üÜô –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: {tr(ch)}$
üè¢ –¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –±–∏–∑–Ω–µ—Å–∞: {business.bsterritory.tr()} –º¬≤
üÜô –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: {tr(ch2)}$

üí∑ –î–æ—Ö–æ–¥: {tr(dox)}$
üí∏ –ù–∞–ª–æ–≥–∏: {business.nalogs.tr()}$/5.000.000$
üí∞ –ü—Ä–∏–±—ã–ª—å: {business.balance.tr()}$'''
    
    try:
        if action == 'edit':
            await call.message.edit_text(text=txt, reply_markup=kb.business(user.id))
        else:
            msg = await call.answer(text=txt, reply_markup=kb.business(user.id))
            await new_earning(msg)
    except:
        return


@antispam
async def buy_business(message: types.Message, user: BFGuser):
    win, lose = BFGconst.emj()
    business = user.business

    if business:
        await message.answer(f'{user.url}, —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –ø–æ–¥ –±–∏–∑–Ω–µ—Å. –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –≤–≤–µ–¥–∏—Ç–µ "–ú–æ–π –±–∏–∑–Ω–µ—Å" {lose}')
        return

    if int(user.balance) < 500_000_000:   # –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏, –º–µ–Ω—è–π—Ç–µ –µ–µ —Ç–∞–∫–∂–µ –≤ –±–¥...
        await message.answer(f'{user.url}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –±–∏–∑–Ω–µ—Å–∞. –ï—ë —Å—Ç–æ–∏–º–æ—Å—Ç—å 500 –º–ª–Ω$ {lose}')
        return

    await db.buy_business(user.id)  # <- —Ç—É—Ç–∞
    await message.answer(f'{user.url}, –≤—ã —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏–ª–∏ —Å–≤–æ–π –±–∏–∑–Ω–µ—Å –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –≤–≤–µ–¥–∏—Ç–µ "–ú–æ–π –±–∏–∑–Ω–µ—Å" {win}')


@antispam_earning
async def buy_territory(call: types.CallbackQuery, user: BFGuser):
    win, lose = BFGconst.emj()
    business = user.business

    if not business:
       return

    ch = int(22000000 * (1 + 0.15) ** (business.territory.get() - 4))

    if int(user.balance) < ch:
        await call.answer(f'{user.name}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é –±–∏–∑–Ω–µ—Å–∞ {lose}')
        return
        
    await db.buy_territory(user.id, ch)
    await call.answer(f'{user.name}, –≤—ã —É—Å–ø–µ—à–Ω–æ —É–≤–µ–ª–∏—á–∏–ª–∏ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é –±–∏–∑–Ω–µ—Å–∞ –Ω–∞ 1 –º¬≤ –∑–∞ {tr(ch)}$ {win}')
    await upd_business_text(call, user)


@antispam_earning
async def buy_bsterritory(call: types.CallbackQuery, user: BFGuser):
    win, lose = BFGconst.emj()
    business = user.business

    if not business:
        return

    if business.territory.get() <= business.bsterritory.get():
        await call.answer(f'{user.name}, —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –±–∏–∑–Ω–µ—Å –¥–ª—è –Ω–∞—á–∞–ª–∞ —É–≤–µ–ª–∏—á—å—Ç–µ –µ–≥–æ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é {lose}')
        return

    ch = int(22000000 * (1 + 0.15) ** (business.bsterritory.get() - 1))

    if int(user.balance) < ch:
        await call.answer(f'{user.name}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –±–∏–∑–Ω–µ—Å {lose}')
        return

    await db.buy_bsterritory(user.id, ch)
    await call.answer(f'{user.name}, –≤—ã —É—Å–ø–µ—à–Ω–æ —É–≤–µ–ª–∏—á–∏–ª–∏ –±–∏–∑–Ω–µ—Å –Ω–∞ 1 –º¬≤ –∑–∞ {tr(ch)}$ {win}')
    await upd_business_text(call, user)


@antispam_earning
async def withdraw_profit(call: types.CallbackQuery, user: BFGuser):
    win, lose = BFGconst.emj()
    business = user.business

    if not business:
        return

    if business.balance.get() == 0:
        await call.answer(f'{user.name}, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞ –Ω–µ—Ç –ø—Ä–∏–±—ã–ª–∏ {lose}')
        return

    await db.withdraw_profit(user.id, business.balance.get())
    await call.answer(f'{user.name}, –≤—ã —É—Å–ø–µ—à–Ω–æ —Å–Ω—è–ª–∏ {business.balance.tr()}$ —Å –±–∞–ª–∞–Ω—Å–∞ –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞ {win}')
    await upd_business_text(call, user)


@antispam_earning
async def payment_taxes(call: types.CallbackQuery, user: BFGuser):
    win, lose = BFGconst.emj()
    business = user.business
    
    if not business:
        return

    if int(user.balance) < int(business.nalogs):
        await call.answer(f'{user.name}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ —á—Ç–æ–± –æ–ø–ª–∞—Ç–∏—Ç—å –Ω–∞–ª–æ–≥–∏ {lose}')
        return

    if business.nalogs.get() == 0:
        await call.answer(f'{user.name}, —É –≤–∞—Å –Ω–µ—Ç –Ω–∞–ª–æ–≥–æ–≤ —á—Ç–æ–±—ã –∏—Ö –æ–ø–ª–∞—Ç–∏—Ç—å {win}')
        return

    await db.payment_taxes(user.id, business.nalogs.get())
    await call.answer(f'{user.name}, –≤—ã —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏ –Ω–∞–ª–æ–≥–∏ –Ω–∞ —Å—É–º–º—É {business.nalogs.tr()}$ —Å –≤–∞—à–µ–≥–æ –∏–≥—Ä–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ {win}')
    await upd_business_text(call, user)
    
    
@antispam
async def sell_business(message: types.Message, user: BFGuser):
    win, lose = BFGconst.emj()
    business = user.business
    
    if not business:
        await message.answer(f'{user.url}, —É –≤–∞—Å –Ω–µ—Ç —Å–≤–æ–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞ —á—Ç–æ–±—ã –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –±–∏–∑–Ω–µ—Å" {lose}')
        return
    
    summ = 250_000_000  # –ü–æ–ª–æ–≤–∏–Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –±–∏–∑–Ω–µ—Å–∞
    
    for i in range(6, business.territory.get() + 1):  # –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –∑–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é (50%)
        summ += int(22_000_000 * (1 + 0.15) ** (i - 4)) // 2
        
    for i in range(6, business.bsterritory.get() + 1):  # –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –∑–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é –±–∏–∑–Ω–µ—Å–∞ (50%)
        summ += int(22_000_000 * (1 + 0.15) ** (i - 1))
    
    await db.sell_business(user.id, summ)
    await message.answer(f'{user.url}, –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–ª–∏ —Å–≤–æ–π –±–∏–∑–Ω–µ—Å –∑–∞ {tr(summ)}$ {win}')


def reg(dp: Dispatcher):
    dp.message.register(my_business, TextIn("–º–æ–π –±–∏–∑–Ω–µ—Å"))
    dp.message.register(business_info, TextIn("–±–∏–∑–Ω–µ—Å"))
    dp.message.register(buy_business, TextIn("–ø–æ—Å—Ç—Ä–æ–∏—Ç—å –±–∏–∑–Ω–µ—Å"))
    dp.callback_query.register(withdraw_profit, StartsWith("business-sobrat"))
    dp.callback_query.register(buy_territory, StartsWith("business-ter"))
    dp.callback_query.register(buy_bsterritory, StartsWith("business-bis"))
    dp.callback_query.register(payment_taxes, StartsWith("business-nalog"))
    dp.message.register(sell_business, TextIn("–ø—Ä–æ–¥–∞—Ç—å –±–∏–∑–Ω–µ—Å"))
