from aiogram import types, Dispatcher

from commands.entertaining.earnings.tree import db
from assets.transform import transform_int as tr
from assets import kb
from assets.antispam import new_earning, antispam, antispam_earning
from user import BFGuser, BFGconst


@antispam
async def tree_cmd(message: types.Message, user: BFGuser):
    await message.answer('''üå≥ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–æ–≤—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞—Ä–∞–±–æ—Ç–∫–∞ - –¥–µ–Ω–µ–∂–Ω–æ–µ –¥–µ—Ä–µ–≤–æ! –¢–µ–ø–µ—Ä—å, –ø–æ–º–∏–º–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–≤–æ–∏–º –±–∏–∑–Ω–µ—Å–æ–º, —É –≤–∞—Å –µ—Å—Ç—å —à–∞–Ω—Å –≤—ã—Ä–∞—â–∏–≤–∞—Ç—å –¥–µ–Ω—å–≥–∏ –ø—Ä—è–º–æ –Ω–∞ —Å–≤–æ–µ–º —É—á–∞—Å—Ç–∫–µ.

üè° –î–ª—è –Ω–∞—á–∞–ª–∞ –≤–∞–º –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —É—á–∞—Å—Ç–æ–∫ –ø–æ–¥ –≤–∞—à–µ –¥–µ–Ω–µ–∂–Ω–æ–µ –¥–µ—Ä–µ–≤–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å —É—á–∞—Å—Ç–æ–∫", —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –Ω–µ–±–æ–ª—å—à–æ–π —É—á–∞—Å—Ç–æ–∫ –∑–µ–º–ª–∏ –¥–ª—è –≤–∞—à–µ–≥–æ –Ω–æ–≤–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–æ—Ö–æ–¥–∞.

üí∞ –î–∞–ª–µ–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–ª—É—á—à–∞—Ç—å –≤–∞—à–µ –¥–µ–Ω–µ–∂–Ω–æ–µ –¥–µ—Ä–µ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É—è –±–∏–æ—Ä–µ—Å—É—Ä—Å—ã. –ß–µ–º –±–æ–ª—å—à–µ —É–ª—É—á—à–µ–Ω–∏–π, —Ç–µ–º –±–æ–ª—å—à–µ –¥–µ–Ω–µ–≥ –æ–Ω–æ –±—É–¥–µ—Ç –ø—Ä–∏–Ω–æ—Å–∏—Ç—å.

üåü –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ, —á—Ç–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—à–∏–º –¥–µ–Ω–µ–∂–Ω—ã–º –¥–µ—Ä–µ–≤–æ–º –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —É–≤–µ–ª–∏—á–∏—Ç—å –¥–æ—Ö–æ–¥ –∏ –¥–æ—Å—Ç–∏—á—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ —É—Å–ø–µ—Ö–∞. –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, –≤–≤–µ–¥–∏—Ç–µ "–ü–æ–º–æ—â—å" –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª.''')


@antispam
async def my_tree(message: types.Message, user: BFGuser):
    win, lose = BFGconst.emj()
    tree = user.tree

    if not tree:
        await message.answer(f'{user.url}, —É –≤–∞—Å –Ω–µ—Ç —Å–≤–æ–µ–≥–æ —É—á–∞—Å—Ç–∫–∞ –¥–µ–Ω–µ–∂–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ {lose}')
        return

    await edit_tree_msg(message, user, action='send')


async def edit_tree_msg(call: types.CallbackQuery | types.Message, user: BFGuser, action='edit') -> None:
    tree = user.tree
    
    if action == 'edit':
        await user.update()

    profit = int(3000 * (tree.tree.get() ** 3.8))
    tre_price = int(5000 * (tree.tree.get() ** 3.8))
    ter_price = int(5000 * (tree.territory.get() ** 3.8))

    txt = f'''{user.url}, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º —É—á–∞—Å—Ç–∫–µ "–î–µ–Ω–µ–∂–Ω–æ–µ –¥–µ—Ä–µ–≤–æ":
üè° –£—á–∞—Å—Ç–æ–∫: {tree.territory} –º¬≤
üÜô –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: {tr(ter_price)} ‚ò£Ô∏è
üå≥ –†–∞–∑–º–µ—Ä –¥–µ—Ä–µ–≤–∞: {tree.tree} –º
üÜô –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: {tr(tre_price)} ‚ò£Ô∏è

üí∑ –î–æ—Ö–æ–¥: {tr(profit)}$
üí∏ –ù–∞–ª–æ–≥–∏: {tree.nalogs.tr()}$/5.000.000$
üí∞ –ü—Ä–∏–±—ã–ª—å: {tree.balance.tr()}$
üí¥ –ô–µ–Ω—ã: {tree.yen.tr()}¬•'''
    
    try:
        if action == 'edit':
            await call.message.edit_text(text=txt, reply_markup=kb.tree(user.id))
        else:
            msg = await call.answer(text=txt, reply_markup=kb.tree(user.id))
            await new_earning(msg)
    except:
        return


@antispam
async def buy_tree(message: types.Message, user: BFGuser):
    win, lose = BFGconst.emj()
    tree = user.tree

    if tree:
        await message.answer(f'{user.url}, —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Å–≤–æ–π —É—á–∞—Å—Ç–æ–∫. –î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –≤–≤–µ–¥–∏—Ç–µ "–ú–æ—ë –¥–µ—Ä–µ–≤–æ" {win}')
        return

    if int(user.biores) < 500_000_000:
        await message.answer(f'{user.url}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∏–æ—Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏ —É—á–∞—Å—Ç–∫–∞ –¥–µ–Ω–µ–∂–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞. '
                             f'–ï–≥–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å 500.000.000 –∫–≥ –±–∏–æ—Ä–µ—Å—É—Ä—Å–∞ {lose}')
        return

    await db.buy_tree(user.id)
    await message.answer(f'{user.url}, –≤—ã —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏–ª–∏ —Å–≤–æ–π —É—á–∞—Å—Ç–æ–∫ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –≤–≤–µ–¥–∏—Ç–µ "–ú–æ—ë –¥–µ—Ä–µ–≤–æ" {win}')


@antispam_earning
async def withdraw_profit(call: types.CallbackQuery, user: BFGuser):
    win, lose = BFGconst.emj()
    tree = user.tree

    if not tree:
        return

    if int(tree.balance) <= 0 and int(tree.yen) <= 0:
        await call.answer(f'{user.name}, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –≤–∞—à–µ–≥–æ —É—á–∞—Å—Ç–∫–∞ –Ω–µ—Ç –ø—Ä–∏–±—ã–ª–∏ {lose}')
        return

    await db.withdraw_profit(user.id, tree.balance.get(), tree.yen.get())
    await call.answer(f'{user.name}, –≤—ã —É—Å–ø–µ—à–Ω–æ —Å–Ω—è–ª–∏ {tree.balance.tr()}$ –∏ {tree.yen.tr()}¬• —Å –±–∞–ª–∞–Ω—Å–∞ –≤–∞—à–µ–≥–æ —É—á–∞—Å—Ç–∫–∞ {win}')
    await edit_tree_msg(call, user)


@antispam_earning
async def pay_taxes(call: types.CallbackQuery, user: BFGuser):
    win, lose = BFGconst.emj()
    tree = user.tree

    if not tree:
        return

    if int(user.balance) < int(tree.nalogs):
        await call.answer(f'{user.name}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ —á—Ç–æ–± –æ–ø–ª–∞—Ç–∏—Ç—å –Ω–∞–ª–æ–≥–∏ {lose}')
        return

    if int(tree.nalogs) <= 0:
        await call.answer(f'{user.name}, —É –≤–∞—Å –Ω–µ—Ç –Ω–∞–ª–æ–≥–æ–≤ —á—Ç–æ–±—ã –∏—Ö –æ–ø–ª–∞—Ç–∏—Ç—å {win}')
        return

    await db.pay_taxes(user.id, tree.nalogs.get())
    await call.answer(f'{user.name}, –≤—ã —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏ –Ω–∞–ª–æ–≥–∏ –Ω–∞ —Å—É–º–º—É {tree.nalogs.tr()}$ —Å –≤–∞—à–µ–≥–æ –∏–≥—Ä–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ {win}')
    await edit_tree_msg(call, user)


@antispam_earning
async def buy_ter(call: types.CallbackQuery, user: BFGuser):
    win, lose = BFGconst.emj()
    tree = user.tree

    if not tree:
        return

    summ = int(5000 * (tree.territory.get() ** 3.8))

    if int(user.biores) < summ:
        await call.answer(f'{user.name}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∏–æ—Ä–µ—Å—É—Ä—Å–æ–≤ {lose}')
        return

    await db.buy_ter(user.id, summ)
    await call.answer(f'{user.name}, –≤—ã —É—Å–ø–µ—à–Ω–æ —É–≤–µ–ª–∏—á–∏–ª–∏ —É—á–∞—Å—Ç–æ–∫ –∑–∞ {tr(summ)}‚ò£Ô∏è {win}')
    await edit_tree_msg(call, user)


@antispam_earning
async def buy_tree_call(call: types.CallbackQuery, user: BFGuser):
    win, lose = BFGconst.emj()
    tree = user.tree

    if not tree:
        return

    summ = int(5000 * (tree.tree.get() ** 3.8))

    if int(user.balance) < summ:
        await call.answer(f'{user.name}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∏–æ—Ä–µ—Å—É—Ä—Å–æ–≤ {lose}')
        return

    if int(tree.territory) <= int(tree.tree):
        await call.answer(f'{user.name}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ {lose}')
        return

    await db.buy_tree_ter(user.id, summ)
    await call.answer(f'{user.name}, –≤—ã —É—Å–ø–µ—à–Ω–æ —É–≤–µ–ª–∏—á–∏–ª–∏ –¥–µ—Ä–µ–≤–æ –∑–∞ {tr(summ)}‚ò£Ô∏è {win}')
    await edit_tree_msg(call, user)


@antispam
async def sell_tree(message: types.Message, user: BFGuser):
    win, lose = BFGconst.emj()
    tree = user.tree
    
    if not tree:
        await message.answer(f'{user.url}, —É –≤–∞—Å –Ω–µ—Ç —Å–≤–æ–µ–≥–æ —É—á–∞—Å—Ç–∫–∞ –¥–µ–Ω–µ–∂–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ {lose}')
        return

    summ = 250_000_000  # –ü–æ–ª–æ–≤–∏–Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–µ—Ä–µ–≤–∞
    
    for i in range(1, tree.tree.get() + 1):  # –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –∑–∞ –¥–µ—Ä–µ–≤—å—è (50%)
        summ += int(5000 * (tree.tree.get() ** 3.8)) // 2

    for i in range(1, tree.territory.get() + 1):  # –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –∑–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é (50%)
        summ += int(5000 * (tree.territory.get() ** 3.8)) // 2
    
    await db.sell_tree(user.id, summ)
    await message.answer(f'{user.url}, –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–ª–∏ —Å–≤–æ—ë –¥–µ–Ω–µ–∂–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –∑–∞ {tr(summ)}‚ò£Ô∏è {win}')


def reg(dp: Dispatcher):
    dp.register_message_handler(tree_cmd, lambda message: message.text.lower() == '–¥–µ–Ω–µ–∂–Ω–æ–µ –¥–µ—Ä–µ–≤–æ')
    dp.register_message_handler(my_tree, lambda message: message.text.lower() in ['–º–æ—ë –¥–µ—Ä–µ–≤–æ', '–º–æ–µ –¥–µ—Ä–µ–≤–æ'])
    dp.register_message_handler(buy_tree, lambda message: message.text.lower() == '–ø–æ—Å—Ç—Ä–æ–∏—Ç—å —É—á–∞—Å—Ç–æ–∫')
    dp.register_callback_query_handler(withdraw_profit, text_startswith='tree-sobrat')
    dp.register_callback_query_handler(pay_taxes, text_startswith='tree-nalog')
    dp.register_callback_query_handler(buy_tree_call, text_startswith='tree-tree')
    dp.register_callback_query_handler(buy_ter, text_startswith='tree-ter')
    dp.register_message_handler(sell_tree, lambda message: message.text.lower() == '–ü—Ä–æ–¥–∞—Ç—å —É—á–∞—Å—Ç–æ–∫')
