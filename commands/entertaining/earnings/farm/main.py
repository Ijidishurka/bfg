from aiogram import Dispatcher, types

from assets import keyboards as kb
from assets.transform import transform_int as tr
from assets.antispam import antispam_earning, new_earning, antispam
from commands.entertaining.earnings.farm import db
from filters.custom import TextIn, StartsWith
from user import BFGuser, BFGconst


@antispam
async def ferma_list_cmd(message: types.Message, user: BFGuser):
    await message.answer(f'''{user.url}, —Å –¥–∞–Ω–Ω–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ —Ç—ã –º–æ–∂–µ—à—å —Å–∞–º –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ—é —Ñ–µ—Ä–º—É –∏ —É–ª—É—á—à–∞—Ç—å –µ—ë. –≠—Ç–æ –æ—á–µ–Ω—å –≤–µ—Å–µ–ª–æ –∏ –æ–±–ª–µ–≥—á–∏—Ç —Ç–µ–±–µ —Ä–∞–±–æ—Ç—É.

ü™ì –î–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é —Ñ–µ—Ä–º—É, —Ü–µ–Ω–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ 500.000.000$. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Ñ–µ—Ä–º—É" –∏ –ø–æ—Å–ª–µ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É "–ú–æ—è —Ñ–µ—Ä–º–∞" –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –µ—ë –∏ —É–ª—É—á—à–∞—Ç—å –ø–æ–≤—ã—à–∞—è —Å–≤–æ—é –ø—Ä–∏–±—ã–ª—å.

üìé –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã —Ñ–µ—Ä–º –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É "–ü–æ–º–æ—â—å" –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É.''')


@antispam
async def my_ferma_cmd(message: types.Message, user: BFGuser):
    win, lose = BFGconst.emj()
    ferma = user.ferma

    if not ferma:
        await message.answer(f'{user.url}, —É –≤–∞—Å –Ω–µ—Ç —Å–≤–æ–µ–π —Ñ–µ—Ä–º—ã —á—Ç–æ–±—ã –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Ñ–µ—Ä–º—É" {lose}')
        return
    
    await upd_ferma_text(message, user, action='send')


async def upd_ferma_text(call: types.CallbackQuery | types.Message, user: BFGuser, action='edit') -> None:
    ferma = user.ferma
    
    if action == 'edit':
        await user.update()

    dox = int(3000 * (ferma.cards.get() ** 2.5)) if ferma.cards.get() != 0 else 3000
    ch = int(500000000 * (1 + 0.15) ** ferma.cards.get())

    txt = f'''{user.url}, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π "–ú–∞–π–Ω–∏–Ω–≥ —Ñ–µ—Ä–º–∞":
üí∑ –î–æ—Ö–æ–¥: {tr(dox)}‡∏ø/—á–∞—Å
üìù –í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã: {ferma.cards.tr()} —à—Ç./‚ôæÔ∏è —à—Ç.
üÜô –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: {tr(ch)}$

üí∏ –ù–∞–ª–æ–≥–∏: {ferma.nalogs.tr()}$/5.000.000$
üí∞ –ù–∞ —Å—á–µ—Ç—É: {ferma.balance.tr()}‡∏ø'''
    
    try:
        if action == 'edit':
            await call.message.edit_text(text=txt, reply_markup=kb.farm(user.id))
        else:
            msg = await call.answer(text=txt, reply_markup=kb.farm(user.id))
            await new_earning(msg)
    except:
        return


@antispam
async def buy_ferma_cmd(message: types.Message, user: BFGuser):
    win, lose = BFGconst.emj()
    ferma = user.ferma
    
    if ferma:
        await message.answer(f'{user.url}, —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Ñ–µ—Ä–º–∞. –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –≤–≤–µ–¥–∏—Ç–µ "–ú–æ—è —Ñ–µ—Ä–º–∞" {lose}')
        return
    
    if int(user.balance) < 500_000_000:
        await message.answer(f'{user.url}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏ —Ñ–µ—Ä–º—ã. –ï—ë —Å—Ç–æ–∏–º–æ—Å—Ç—å 500.000.000$ {lose}')
        return
        
    await db.buy_ferma(user.id)
    await message.answer(f'{user.url}, –≤—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ —Ñ–µ—Ä–º—É –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –≤–≤–µ–¥–∏—Ç–µ "–ú–æ—è —Ñ–µ—Ä–º–∞" {win}')


@antispam_earning
async def buy_cards_cmd(call: types.CallbackQuery, user: BFGuser):
    win, lose = BFGconst.emj()
    ferma = user.ferma

    if not ferma:
        return

    ch = int(500_000_000 * (1 + 0.15) ** (ferma.cards.get() - 1))
    
    if int(user.balance) < ch:
        await call.answer(f'{user.name}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –≤–∏–¥–µ–æ–∫–∞—Ä—Ç. –ï—ë —Å—Ç–æ–∏–º–æ—Å—Ç—å {tr(ch)}$ {lose}')
        return
    
    await db.buy_cards(user.id, ch)
    await call.answer(f'{user.name}, –≤—ã —É—Å–ø–µ—à–Ω–æ —É–≤–µ–ª–∏—á–∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç –≤ —Ñ–µ—Ä–º–µ –∑–∞ {tr(ch)}$ {win}')
    await upd_ferma_text(call, user)


@antispam_earning
async def withdraw_profit_cmd(call: types.CallbackQuery, user: BFGuser):
    win, lose = BFGconst.emj()
    ferma = user.ferma

    if not ferma:
        return

    if int(ferma.balance) == 0:
        await call.answer(f'{user.name}, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –≤–∞—à–µ–π —Ñ–µ—Ä–º—ã –Ω–µ—Ç –ø—Ä–∏–±—ã–ª–∏ {lose}')
        return
    
    await db.withdraw_profit(user.id, ferma.balance.get())
    await call.answer(f'{user.name}, –≤—ã —É—Å–ø–µ—à–Ω–æ —Å–Ω—è–ª–∏ {ferma.balance.tr()}‡∏ø —Å –±–∞–ª–∞–Ω—Å–∞ –≤–∞—à–µ–π —Ñ–µ—Ä–º—ã {win}')
    await upd_ferma_text(call, user)


@antispam_earning
async def payment_taxes_cmd(call: types.CallbackQuery, user: BFGuser):
    win, lose = BFGconst.emj()
    ferma = user.ferma

    if not ferma:
        return

    if int(user.balance) < int(ferma.nalogs):
        await call.answer(f'{user.name}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ —á—Ç–æ–± –æ–ø–ª–∞—Ç–∏—Ç—å –Ω–∞–ª–æ–≥–∏ {lose}')
        return

    if int(ferma.nalogs) == 0:
        await call.answer(f'{user.name}, —É –≤–∞—Å –Ω–µ—Ç –Ω–∞–ª–æ–≥–æ–≤ —á—Ç–æ–±—ã –∏—Ö –æ–ø–ª–∞—Ç–∏—Ç—å {win}')
        return

    await db.pay_taxes(user.id, ferma.nalogs.get())
    await call.answer(f'{user.name}, –≤—ã —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏ –Ω–∞–ª–æ–≥–∏ –Ω–∞ —Å—É–º–º—É {ferma.nalogs.tr()}$ —Å –≤–∞—à–µ–≥–æ –∏–≥—Ä–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ {win}')
    await upd_ferma_text(call, user)


@antispam
async def sell_ferma_cmd(message: types.Message, user: BFGuser):
    win, lose = BFGconst.emj()
    ferma = user.ferma
    
    if not ferma:
        await message.answer(f'{user.url}, —É –≤–∞—Å –Ω–µ—Ç —Å–≤–æ–µ–π —Ñ–µ—Ä–º—ã —á—Ç–æ–±—ã –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Ñ–µ—Ä–º—É" {lose}')
        return
    
    summ = 250_000_000  # –ü–æ–ª–æ–≤–∏–Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ñ–µ—Ä–º—ã
    
    for i in range(1, ferma.cards.get() + 1):  # –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –∑–∞ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã (50%)
        summ += int(500_000_000 * (1 + 0.15) ** (i - 1)) // 2
        
    await db.sell_ferma(user.id, summ)
    await message.answer(f'{user.url}, –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–ª–∏ —Å–≤–æ—é —Ñ–µ—Ä–º—É –∑–∞ {tr(summ)}$ {win}')
    

def reg(dp: Dispatcher):
    dp.message.register(my_ferma_cmd, TextIn("–º–æ—è —Ñ–µ—Ä–º–∞"))
    dp.message.register(ferma_list_cmd, TextIn("—Ñ–µ—Ä–º–∞", "—Ñ–µ—Ä–º—ã"))
    dp.message.register(buy_ferma_cmd, TextIn("–ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Ñ–µ—Ä–º—É"))
    dp.callback_query.register(buy_cards_cmd, StartsWith("ferma-bycards"))
    dp.callback_query.register(withdraw_profit_cmd, StartsWith("ferma-sobrat"))
    dp.callback_query.register(payment_taxes_cmd, StartsWith("ferma-nalog"))
    dp.message.register(sell_ferma_cmd, TextIn("–ø—Ä–æ–¥–∞—Ç—å —Ñ–µ—Ä–º—É"))
