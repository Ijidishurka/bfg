from aiogram import Dispatcher, types

from assets.antispam import antispam
from commands.db import url_name, get_name
from commands.entertaining.db import *
from bot import bot
from assets import kb
from user import BFGuser, BFGconst
from assets.gettime import get_ptime


@antispam
async def my_wedlock(message: types.message, user: BFGuser):
	data = await get_wedlock(user.id)
	win, lose = BFGconst.emj()
	
	if not data:
		await message.answer(f'{user.url}, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –±—Ä–∞–∫–µ {lose}')
		return

	name1 = await get_name(data[0])
	name2 = await get_name(data[1])

	name1 = f'<a href="tg://openmessage?user_id={data[0]}">{name1}</a>'
	name2 = f'<a href="tg://openmessage?user_id={data[1]}">{name2}</a>'

	dt = datetime.fromtimestamp(data[2]).strftime('%d.%m.%y –≤ %H:%M:%S')
	dt_delta = get_ptime(data[2])

	await message.answer(f'–ë—Ä–∞–∫ –º–µ–∂–¥—É {name1} –∏ {name2}:\nüóì –ó–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {dt}\nüë©‚Äç‚ù§Ô∏è‚Äçüë® –°—É—â–µ—Å—Ç–≤—É–µ—Ç: {dt_delta}')


@antispam
async def wedlock(message: types.message, user: BFGuser):
	win, lose = BFGconst.emj()

	try:
		r_id = message.reply_to_message.from_user.id
		rname = await url_name(r_id)
	except:
		await message.answer(f'{user.url}, –≤—ã –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–∂–µ–Ω–∏—Ç—å—Å—è {lose}')
		return

	if user.id == r_id:
		await message.answer(f'{user.url}, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∂–µ–Ω–∏—Ç—å—Å—è –Ω–∞ —Å–∞–º–æ–º—É —Å–µ–±–µ {lose}')
		return

	res = await get_new_wedlock(user.id, r_id)

	if res == 'u_not':
		await message.answer(f'{user.url}, –≤—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –±—Ä–∞–∫–µ {lose}')
	elif res == 'r_not':
		await message.answer(f'{user.url}, –≤–∞—à –ø–∞—Ä—Ç–Ω—ë—Ä —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –±—Ä–∞–∫–µ {lose}')
	else:
		await message.answer(f'''üíç {rname}, –º–∏–Ω—É—Ç—É –≤–Ω–∏–º–∞–Ω–∏—è!
üíì {user.url} —Å–¥–µ–ª–∞–ª –≤–∞–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä—É–∫–∏ –∏ —Å–µ—Ä–¥—Ü–∞.
üòç –ü—Ä–∏–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏–µ –º–æ–∂–Ω–æ –∫–Ω–æ–ø–∫–∞–º–∏ –≤–Ω–∏–∑—É.''', reply_markup=kb.wedlock(user.id, r_id))


async def wedlock_call(call: types.CallbackQuery):
	data = call.data.split('-')[1].split('|')
	action, r_id, u_id = data[0], int(data[1]), int(data[2])
	user_id = call.from_user.id

	if action == 'false' and user_id == u_id:
		try:
			await call.message.delete()
		except:
			...
		return

	if user_id != r_id:
		await bot.answer_callback_query(call.id, text='‚ö†Ô∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å —ç—Ç—É –∫–Ω–æ–ø–∫—É.')
		return

	try:
		await call.message.delete()
	except:
		return

	name1 = await url_name(u_id)
	name2 = await url_name(r_id)

	if action != 'true':
		await call.message.answer(f'üíî {name1}, c–æ–∂–∞–ª–µ–µ–º, –Ω–æ {name2} –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –±—Ä–∞–∫–æ—Å–æ—á–µ—Ç–∞–Ω–∏–∏.')
		return

	if (await new_wedlock(u_id, r_id)):
		return
	
	await call.message.answer(f'''üíç –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –±—Ä–∞–∫–µ
üë∞üë®‚Äç‚öñ –° —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è {name1} –∏ {name2} —Å–æ—Å—Ç–æ—è—Ç –≤ –±—Ä–∞–∫–µ!
–ü–æ–∑–¥—Ä–∞–≤–∏–º –º–æ–ª–æ–¥–æ–∂–µ–Ω–æ–≤ üéâ''')


@antispam
async def divorce(message: types.message, user: BFGuser):
	data = await get_wedlock(user.id)
	win, lose = BFGconst.emj()
	
	if not data:
		await message.answer(f'{user.url}, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –Ω–µ –∂–µ–Ω–∞—Ç—ã {lose}')
		return

	await message.answer(f'üìù –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—ã —Å–æ–≥–ª–∞—Å–Ω—ã —Ä–∞–∑–≤–æ–¥–∏—Ç—Å—è.\n–ß—Ç–æ–±—ã —Ä–∞–∑–≤–µ—Å—Ç–∏—Å—å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ', reply_markup=kb.divorce(user.id))


async def divorce_call(call: types.CallbackQuery):
	action = call.data.split('-')[1].split('|')[0]
	uid = int(call.data.split('|')[1])
	user_id = call.from_user.id

	if user_id != uid:
		await bot.answer_callback_query(call.id, text='‚ö†Ô∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å —ç—Ç—É –∫–Ω–æ–ø–∫—É.')
		return

	name = await url_name(user_id)
	data = await get_wedlock(user_id)

	if not data:
		return

	try:
		await call.message.delete()
	except:
		return

	if action == 'true':
		await divorce_db(uid)
		dt_delta = get_ptime(data[2])
		name1 = await url_name(data[0])
		name2 = await url_name(data[1])
		await call.message.answer(f'üíî –ë—Ä–∞–∫ –º–µ–∂–¥—É {name1} –∏ {name2} —Ä–∞—Å—Ç–æ—Ä–≥–Ω—É—Ç.\n–û–Ω –ø—Ä–æ—Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª {dt_delta}')
	else:
		await call.message.answer(f'{name}, –≤—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —Ä–∞–∑–≤–æ–¥–∞ üòé')


def reg(dp: Dispatcher):
	dp.register_message_handler(my_wedlock, lambda message: message.text.lower() == '–º–æ–π –±—Ä–∞–∫')
	dp.register_message_handler(wedlock, lambda message: message.text.lower() == '—Å–≤–∞–¥—å–±–∞')
	dp.register_callback_query_handler(wedlock_call, text_startswith='wedlock-')
	dp.register_message_handler(divorce, lambda message: message.text.lower() == '—Ä–∞–∑–≤–æ–¥')
	dp.register_callback_query_handler(divorce_call, text_startswith='divorce-')
